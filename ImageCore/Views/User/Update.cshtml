@{
    Layout = "_Layout";
}
@using ImageCore.Services
@model ImageCore.Models.ViewModel.User.UserEditViewModel;
@inject IImageLoader ImageLoader

<form class="EditUserWrapper" asp-controller="User" asp-action="Put" asp-route-id="@ViewData["id"]">
    <h1>Benutzer bearbeiten</h1>
    @if (ViewData["UserSaved"] is not null)
    {
        <p>Änderungen gespeichert</p>
    }
    <div class="UserEditImageRow">
        @if (Model.UserImage is not null && !Model.UserImage.Equals(""))
        {
            <img class="UserProfileImageEdit" onclick="document.getElementById('ImageToUpload').click()"
                         src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(ImageLoader.GetProfileImage(Model.UserImage)))">
        }
        else
        {
             <img class="UserProfileImageEdit" onclick="document.getElementById('ImageToUpload').click()" src="~/images/Icons/UserIconWhite.svg">
        }
        <div class="UserInformation">
            <label>Username</label>
            <p>@Model.Username</p>
            <label>E-Mail</label>
            <p>@Model.Email</p>
            <label>Rolle</label>
            <p>@Model.Role</p>
        </div>
        <input id="ImageToUpload" class="userEditImage" type="file">
    </div>
    <div class="UserInputRow">
        <label>Username</label>
        <input name="Username" type="text">
        <label>E-Mail</label>
        <input name="Email"  type="email">
        <label>Passwort</label>
        <input name="Password"  type="password">
        <label>Role</label>
        <select type="text" name="Role" >
            @if (Model.Role.Equals("User"))
            {
                <option selected="selected"  value="User">Benutzer</option>
                <option value="Admin">Admin</option>
            }
            @if (Model.Role.Equals("Admin"))
            {
                <option value="User">Benutzer</option>
                <option selected="selected"  value="Admin">Admin</option>
            }
        </select>
        <div class="buttonUpdateWrapper" style="display: flex;flex-direction: row;margin-top: 25px"> 
              <button type="submit" class="acceptContactRequestBtn" >Speichern</button>
              <button onclick="event.preventDefault();deleteElement()" class="acceptContactRequestBtn">Löschen</button>
        </div>
    </div>
</form>
<template>
    <div class="modalWindowConfirmWrapper" id="projectModalWindow">
        <div class="modalWindowConfirm">
            <h1>Möchtest du wirklich diesen User löschen?</h1>
            <div class="modalWindowBtnWrapper">
                <button id="deleteProjectBtn">Delete</button>
                <button id="cancelProjectBtn" onclick="this.parentNode.parentNode.parentElement.remove()">Cancel</button>
            </div>
        </div>
    </div>
</template>

<script>
   function deleteElement()
   {
       let template = document.getElementsByTagName("template")[0].content.cloneNode(true);
       let wrapper = template.children[0];
       document.body.appendChild(wrapper);
       wrapper.style.display = "block";
       let deleteBtn = wrapper.children[0].children[1].children[0];
       deleteBtn.addEventListener('click',() => {
           window.location.href = `@Url.Action("DeleteAnotherAccount", "User", new {id = ViewData["id"]}, ViewData["RequestScheme"].ToString())`;
       });   
   }
   
        
</script>