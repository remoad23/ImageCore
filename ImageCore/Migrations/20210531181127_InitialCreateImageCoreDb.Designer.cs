// <auto-generated />
using System;
using ImageCore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ImageCore.Migrations
{
    [DbContext(typeof(ContextDb))]
    [Migration("20210531181127_InitialCreateImageCoreDb")]
    partial class InitialCreateImageCoreDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("ImageCore.Models.ContactModel", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequestValidated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ContactId");

                    b.HasIndex("ContactUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("ImageCore.Models.FilterModel", b =>
                {
                    b.Property<int>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilterType")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageLayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FilterId");

                    b.HasIndex("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("ImageCore.Models.ImageComponentModel", b =>
                {
                    b.Property<int>("ImageComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorMat")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageLayerId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("LocalX")
                        .HasColumnType("REAL");

                    b.Property<float>("LocalY")
                        .HasColumnType("REAL");

                    b.Property<float>("LocalZ")
                        .HasColumnType("REAL");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ImageComponentId");

                    b.HasIndex("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ImageComponent");
                });

            modelBuilder.Entity("ImageCore.Models.ImageLayerModel", b =>
                {
                    b.Property<int>("ImageLayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LayerType")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaskMat")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Opacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.Property<float>("X")
                        .HasColumnType("REAL");

                    b.Property<float>("Y")
                        .HasColumnType("REAL");

                    b.Property<float>("Z")
                        .HasColumnType("REAL");

                    b.HasKey("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ImageLayer");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            Name = "Projekt 1",
                            UserId = "eaa04851-2738-4c31-9c9b-c29c902434d9",
                            Views = 4355
                        },
                        new
                        {
                            ProjectId = 2,
                            Name = "Projekt 2",
                            UserId = "643c3870-a312-4d0d-9d0e-107c627496c4",
                            Views = 4
                        },
                        new
                        {
                            ProjectId = 3,
                            Name = "Projekt 3",
                            UserId = "eaa04851-2738-4c31-9c9b-c29c902434d9",
                            Views = 345
                        },
                        new
                        {
                            ProjectId = 4,
                            Name = "Projekt 4",
                            UserId = "05e31df7-5226-4e89-ba7d-cfe2e9d75bdb",
                            Views = 2
                        },
                        new
                        {
                            ProjectId = 5,
                            Name = "Projekt 5",
                            UserId = "5c8735ab-5633-4b56-ba9b-8826eab74547",
                            Views = 25
                        });
                });

            modelBuilder.Entity("ImageCore.Models.ProjectParticipatorModel", b =>
                {
                    b.Property<int>("ProjectParticipatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectParticipatorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectParticipator");
                });

            modelBuilder.Entity("ImageCore.Models.RoleModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ImageCore.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "eaa04851-2738-4c31-9c9b-c29c902434d9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03b8c316-2da2-41d7-821b-e80acf8dcad6",
                            Email = "imagecore23@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IMAGECORE23@GMAIL.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEPCB8ArHQeZ5+p0F6hM8ybmdc4Tu/6Ixdgz1wcedLwq3mHobW0I2wjG8clcogR2fgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a5d6edeb-5541-4c92-be0c-6783fbb81d33",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "05e31df7-5226-4e89-ba7d-cfe2e9d75bdb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd27a6ed-0b19-412d-8b15-4fb9ec05c51e",
                            Email = "imagecore24@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IMAGECORE24@GMAIL.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEHt5Wzqz8w/tInIqmQY18VXUc45mKUuP450x4k2Lbo2l4nzz25Dh/jOuiU6JHX7vxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df6f1cac-ce39-4485-a86f-84e3236e1820",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "5c8735ab-5633-4b56-ba9b-8826eab74547",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a516623d-894a-4a8b-81e3-942b55669d41",
                            Email = "imagecoreuser@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IMAGECOREUSER@GMAIL.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEPbR1145AszPA4QhCzL2Ly8CfoCkV1QZ2LNs7ih630U4kCp/It9HcwtLiP6ujoCZNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f292e09f-5e88-4884-b8c4-f43270c7b791",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "643c3870-a312-4d0d-9d0e-107c627496c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e44a919a-c078-4f8a-a1d4-ec75067517b3",
                            Email = "user4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@GMAIL.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEIr3/7CedFHo4UuE/EbYnndMtPTqB0BeqjR7+A4bUP2zdcA4FGSC30AitUmPhUYV9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3a9374f8-9a98-4c7c-848c-a01367fb32c3",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = "b2f9ea0c-bc28-4486-a6b9-9018d068b2ef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "261f0ca1-4d90-4973-8c1b-d72b2780e582",
                            Email = "user5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@GMAIL.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAEAACcQAAAAEKrPzeuHjDFwVesCzmHkMeqhHoqx1ywx9kfLjWFdXzsM9Wy8ZzYdAl3Wv8KgmjfSrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e3b5afc-3600-4b6c-b9d6-4796f89a2aac",
                            TwoFactorEnabled = false,
                            UserName = "User5"
                        },
                        new
                        {
                            Id = "702e16bc-3c8d-4ee4-b390-30d31a0f5cd1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8f754e7-e449-4c0b-9500-1c1fbb0b2f13",
                            Email = "user6@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@GMAIL.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAEAACcQAAAAENAM6D+7O5PBFEpxbq4yg0JP0AioqkaA5HX7ht1V8aGEEjXxD6bqHxZpW/qcr9qswg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c76a6d05-52aa-41e4-b431-ecef24b69c4b",
                            TwoFactorEnabled = false,
                            UserName = "User6"
                        },
                        new
                        {
                            Id = "b28df6cd-5290-418a-95cd-5ad89b2bcd39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3108f975-6b46-4c0d-b2ab-db7627c8c0f1",
                            Email = "user7@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@GMAIL.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAEAACcQAAAAEDKWekLaXZMmxr8Qhz55UDVdwHmOS4Pk0/MdCAbZIQ3pHm2xJ5kbYFwtd86T6fNHfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d88a2b99-6878-449e-8c01-eee2ffbc898b",
                            TwoFactorEnabled = false,
                            UserName = "User7"
                        },
                        new
                        {
                            Id = "dbddd4f1-d6ff-4ade-aa31-02089dc11d52",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d9d63f9-4104-45bc-a242-e1e50bb31e28",
                            Email = "user8@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@GMAIL.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAEAACcQAAAAEAfo2L10TV8QTyH7bZ/JFxlBwQTze++0k7Kk6/mKUYEFfm6zlMMJMAQD83q6ksR1nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18f6fa5b-cc92-4ec2-a9bd-b3eb08eae84c",
                            TwoFactorEnabled = false,
                            UserName = "User8"
                        },
                        new
                        {
                            Id = "f895d9ad-cc8c-4fce-ae2d-428308b02270",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7cf0e4b4-71d9-447f-b893-0001ea961791",
                            Email = "user9@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@GMAIL.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAEAACcQAAAAEMj1/GdzUROQQMf+DqcYxolkFHzlANdDbhtw7dm5ngJDPA3opqX75+0FfsVZIyDPUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2eef5af3-d3f5-4bdf-87b3-3ea0703b56b2",
                            TwoFactorEnabled = false,
                            UserName = "User9"
                        },
                        new
                        {
                            Id = "6cca4a9d-23d5-42b9-bb1c-62aec7c9326f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4109b25f-07e5-4293-b3ee-87af9a4534e5",
                            Email = "user10@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@GMAIL.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAEAACcQAAAAEPq83OOBLZKPWyRuFOunqanN35dlDQMCT6+HKwZkPoQicoaqvPqHkxHcNM6gZi1qlA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "735aa3c1-ff52-48f4-9519-f8055732b34a",
                            TwoFactorEnabled = false,
                            UserName = "User10"
                        },
                        new
                        {
                            Id = "cd30613e-2b2a-4e39-aec2-71c32190df96",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c41348b5-cc20-4af5-905d-c7d25a9db34e",
                            Email = "user11@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER11@GMAIL.COM",
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwHCntd1M9jWnYAdcT7GkRIZLhKU2XC1ZTjYlU8EkzaAdwJam3zOMAyPVNNY2uH+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc896f4e-5739-4e5f-bdcc-37de9ca2877e",
                            TwoFactorEnabled = false,
                            UserName = "User11"
                        },
                        new
                        {
                            Id = "f0a998e3-063c-4ad5-8426-59dd93792f43",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "144c6f89-5b21-4022-a8f3-3bfcdc6c688b",
                            Email = "user12@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER12@GMAIL.COM",
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAEAACcQAAAAEFJtxq9bLX0eXlBSEaTA9/XJPD2nPUHMXMQbVuNk0u+O500A+Udw+J2oJM0bUr++Rw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ca813c8-61f6-414f-a4a9-5ccc956acd49",
                            TwoFactorEnabled = false,
                            UserName = "User12"
                        },
                        new
                        {
                            Id = "bc4b54ca-5817-4781-8acf-a241368e5664",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e46afb23-ccd9-42e6-b1dc-d00afa6b4a58",
                            Email = "user13@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER13@GMAIL.COM",
                            NormalizedUserName = "USER13",
                            PasswordHash = "AQAAAAEAACcQAAAAEIydTlFbeDX/6oNmu+LwIbb7VFf0alyAgnMvUbik5Qo9iBezsoYjK9gFASR32ngoag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7efecc55-ed4a-4a4f-b3c7-cd8000cce032",
                            TwoFactorEnabled = false,
                            UserName = "User13"
                        },
                        new
                        {
                            Id = "23e132ba-cd71-4f74-b724-45d2cd62476f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8441f802-2a4f-4590-b57f-45e267acfc20",
                            Email = "user14@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER14@GMAIL.COM",
                            NormalizedUserName = "USER14",
                            PasswordHash = "AQAAAAEAACcQAAAAEO4E89tyTOzO5CVUDcynHbUJP1jUmFlaZtq753hlNvHC0w6any+mtXGc/GpZMl6WTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00cee053-6f95-4db3-aca3-926c6c415a2c",
                            TwoFactorEnabled = false,
                            UserName = "User14"
                        },
                        new
                        {
                            Id = "b7074c03-ffb5-4abb-9d8e-f1e0b0476422",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eca5c592-0da2-49ef-b6b4-cd3d1b0d0179",
                            Email = "user15@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER15@GMAIL.COM",
                            NormalizedUserName = "USER15",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaZL3f+ExW69U4CPsEKVmRXawbyNVWcgael9aa1tkjR3e3pwT3tBeKHzNAs1WnBxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab8bc366-7eb0-44e1-a07a-492b36a7b5d7",
                            TwoFactorEnabled = false,
                            UserName = "User15"
                        },
                        new
                        {
                            Id = "2f124cc9-9a4e-4701-8ebe-8569447eeecb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b11e7146-72b1-4544-a21f-4a3902e0fd6c",
                            Email = "user16@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER16@GMAIL.COM",
                            NormalizedUserName = "USER16",
                            PasswordHash = "AQAAAAEAACcQAAAAEB5W601MlLJT65nti3BKuuJXWUot1Wdz0Z25FD/So8yBX1TcOSaP0fefzujzs8ssEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "88c32e48-8a17-4407-a709-46d7f77077bf",
                            TwoFactorEnabled = false,
                            UserName = "User16"
                        },
                        new
                        {
                            Id = "68a53863-616e-4fc8-98c4-044a665f1a1b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c9585c8-d4de-48c2-af58-50cbd71be3b6",
                            Email = "user17@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER17@GMAIL.COM",
                            NormalizedUserName = "USER17",
                            PasswordHash = "AQAAAAEAACcQAAAAEOPiukTT8qJvT2+58BwFpaBp4e50pLdIVIGHnsfzM8m+iJZJMyYT4kRkJ0du61Tkaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f95f4f7-e05b-466b-9676-61b7e4cf473e",
                            TwoFactorEnabled = false,
                            UserName = "User17"
                        },
                        new
                        {
                            Id = "ca09f77e-2349-4182-8227-15af314aa602",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a6e84ae-8d62-4e1a-90bb-ff79b855ecf5",
                            Email = "user18@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER18@GMAIL.COM",
                            NormalizedUserName = "USER18",
                            PasswordHash = "AQAAAAEAACcQAAAAEFY8yglQWSPGZxiOvaRas4Y2ZHNYjKi74KyP3vUFFDB3oN1mX27bPQ6LJozk1S/RNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e35f088b-856a-4ba5-96f1-1a822deae5ee",
                            TwoFactorEnabled = false,
                            UserName = "User18"
                        },
                        new
                        {
                            Id = "35db9908-fa67-4b7c-8bbe-97fd6a838627",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "711618e2-675c-4a69-9088-17487ba794e6",
                            Email = "user19@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER19@GMAIL.COM",
                            NormalizedUserName = "USER19",
                            PasswordHash = "AQAAAAEAACcQAAAAENZYvPXaWPo3EN9a/JRHazCVsnK5jtjLBh7K/UGPtt2Ef05SHtH6jidA+4G0MEcQlA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ba8ea4e0-87b9-4f6b-8835-1e56f9b54e35",
                            TwoFactorEnabled = false,
                            UserName = "User19"
                        },
                        new
                        {
                            Id = "2bc17d0b-b05d-4364-b337-eb75a6497c06",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "81c273cf-9c76-4725-b569-892018c6731a",
                            Email = "user20@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER20@GMAIL.COM",
                            NormalizedUserName = "USER20",
                            PasswordHash = "AQAAAAEAACcQAAAAEG/cMYnjcrTZObpu9aAYuWByD3SniZraXTFxBd0lsAJTHfSZc3j8k1z5mLlQko9oEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd1a05a5-94ce-406c-b729-844a49af1dcb",
                            TwoFactorEnabled = false,
                            UserName = "User20"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "9e86f5d4-4e13-4790-b5f3-f48a010e8365",
                            ConcurrencyStamp = "5c5ff87f-28f2-4141-b782-a845108fe7c9",
                            Name = "User"
                        },
                        new
                        {
                            Id = "b34ccb68-95ea-4efb-9394-937e1bc93dbe",
                            ConcurrencyStamp = "422f178b-5408-49d7-8a97-9a106bd8f0ce",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "fe8720fd-ea9f-4dee-9b28-92c56a53dd25",
                            ConcurrencyStamp = "c9ca298b-c457-4e0b-b974-20ea28d51258",
                            Name = "ProjectViewer"
                        },
                        new
                        {
                            Id = "f4760f10-dcc8-495f-8eff-6ac538fa92f1",
                            ConcurrencyStamp = "7897cdf7-3a29-4cb1-8b2e-34b4845d35c7",
                            Name = "ProjectEditor"
                        },
                        new
                        {
                            Id = "aae20f6f-d00a-42fd-a11c-42a3c2fd5ad3",
                            ConcurrencyStamp = "0424a60d-1f88-4c82-830b-20a5a8c9ab53",
                            Name = "ProjectOwner"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ImageCore.Models.ContactModel", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", "ContactUser")
                        .WithMany()
                        .HasForeignKey("ContactUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImageCore.Models.FilterModel", b =>
                {
                    b.HasOne("ImageCore.Models.ImageLayerModel", "ImageLayer")
                        .WithMany()
                        .HasForeignKey("ImageLayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("Filters")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageLayer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ImageComponentModel", b =>
                {
                    b.HasOne("ImageCore.Models.ImageLayerModel", "ImageLayer")
                        .WithMany()
                        .HasForeignKey("ImageLayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ImageComponents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageLayer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ImageLayerModel", b =>
                {
                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ImageLayers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectParticipatorModel", b =>
                {
                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ProjectParticipators")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany("ProjectParticipators")
                        .HasForeignKey("UserId");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.Navigation("Filters");

                    b.Navigation("ImageComponents");

                    b.Navigation("ImageLayers");

                    b.Navigation("ProjectParticipators");
                });

            modelBuilder.Entity("ImageCore.Models.UserModel", b =>
                {
                    b.Navigation("ProjectParticipators");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
