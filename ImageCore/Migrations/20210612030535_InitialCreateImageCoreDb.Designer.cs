// <auto-generated />
using System;
using ImageCore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ImageCore.Migrations
{
    [DbContext(typeof(ContextDb))]
    [Migration("20210612030535_InitialCreateImageCoreDb")]
    partial class InitialCreateImageCoreDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("ImageCore.Models.ContactModel", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequestValidated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ContactId");

                    b.HasIndex("ContactUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("ImageCore.Models.FilterModel", b =>
                {
                    b.Property<int>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilterType")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageLayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FilterId");

                    b.HasIndex("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("ImageCore.Models.ImageComponentModel", b =>
                {
                    b.Property<int>("ImageComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorMat")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageLayerId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("LocalX")
                        .HasColumnType("REAL");

                    b.Property<float>("LocalY")
                        .HasColumnType("REAL");

                    b.Property<float>("LocalZ")
                        .HasColumnType("REAL");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ImageComponentId");

                    b.HasIndex("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ImageComponent");
                });

            modelBuilder.Entity("ImageCore.Models.ImageLayerModel", b =>
                {
                    b.Property<int>("ImageLayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LayerType")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaskMat")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Opacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.Property<float>("X")
                        .HasColumnType("REAL");

                    b.Property<float>("Y")
                        .HasColumnType("REAL");

                    b.Property<float>("Z")
                        .HasColumnType("REAL");

                    b.HasKey("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ImageLayer");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            Name = "Projekt 1",
                            UserId = "8dcb9ccb-2ab5-4adf-9605-6b8804276370",
                            Views = 4355
                        },
                        new
                        {
                            ProjectId = 2,
                            Name = "Projekt 2",
                            UserId = "b7a51167-e025-492e-92d0-addf051e9915",
                            Views = 4
                        },
                        new
                        {
                            ProjectId = 3,
                            Name = "Projekt 3",
                            UserId = "8dcb9ccb-2ab5-4adf-9605-6b8804276370",
                            Views = 345
                        },
                        new
                        {
                            ProjectId = 4,
                            Name = "Projekt 4",
                            UserId = "8afd028d-4b23-4f39-81b9-8d7119684f91",
                            Views = 2
                        },
                        new
                        {
                            ProjectId = 5,
                            Name = "Projekt 5",
                            UserId = "8cce7a59-56e8-4ea9-b304-22d9921a12eb",
                            Views = 25
                        });
                });

            modelBuilder.Entity("ImageCore.Models.ProjectParticipatorModel", b =>
                {
                    b.Property<int>("ProjectParticipatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectParticipatorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectParticipator");
                });

            modelBuilder.Entity("ImageCore.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "8dcb9ccb-2ab5-4adf-9605-6b8804276370",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a98771ae-397e-4c3a-a88d-705c78860c96",
                            Email = "imagecore23@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IMAGECORE23@GMAIL.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEG3/Q1lyxZXX3TY2D6VUVuNLd6NBE1Svvqja3aPkH4KCDtKWCEvVMH+IoFvxKGIo0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52156f2a-db7b-4a4f-9501-6c71e22f1217",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "8afd028d-4b23-4f39-81b9-8d7119684f91",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c12e657-bbc8-46a6-ad11-fef71c271f9c",
                            Email = "imagecore24@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IMAGECORE24@GMAIL.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAELMQMabduJrB0SS2j5ZQac1DZdVEnKo6Kto+/NcjrFaUFw9MH+qpQ4YwtM9Gwoc98g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a35ec097-e56a-4344-a968-a07d215dfcf4",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "8cce7a59-56e8-4ea9-b304-22d9921a12eb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc31cc3d-732c-45fd-bc24-1ea6f311ecc3",
                            Email = "imagecoreuser@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IMAGECOREUSER@GMAIL.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEPlZWP4ds8jBW315yFuYFq/zjF+uQASxBZm9iqs5CCP43c/phx+ZVgFp+i3tV1S77w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5cd1822-ff88-4fd8-8604-bf0fe0f426bb",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "b7a51167-e025-492e-92d0-addf051e9915",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87a3099d-8d97-4f4c-9795-35585d2f74dd",
                            Email = "user4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@GMAIL.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEGUMf+v27nwkRpAzJ1NRc0y89NqbqpXrh3ZOy6XOBM6XEgCDgQAntVrD5Nzm+fOLDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f57ce926-2390-41c9-8452-43c04f1987a2",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = "4523c412-16ed-4602-9bd2-f09b7debd462",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90f55457-1a9c-4339-a379-b16b4d61ed43",
                            Email = "user5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@GMAIL.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAEAACcQAAAAEOpMZ8TVAIWEjkHp5qG39UEBxOM8o6y616umfrxm/MPf+jVfPWM9cv83kMqCE+D6nA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb77a177-469a-4551-ac0f-5d7d06f8c4ed",
                            TwoFactorEnabled = false,
                            UserName = "User5"
                        },
                        new
                        {
                            Id = "3ef559c9-0f7a-4dce-b287-9b5525379d68",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f10ba2c-7f51-436b-b3ba-50760e41a87e",
                            Email = "user6@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@GMAIL.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAEAACcQAAAAEH2CBt+RzU2E/daPM97hhnyXe1+yNn+MEsc95IMyhXqEqZcBzZb56P6IQiSuhP0SvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9151d10-89b9-4748-bff6-18e52c5d57d8",
                            TwoFactorEnabled = false,
                            UserName = "User6"
                        },
                        new
                        {
                            Id = "aacc55a6-c07c-43a7-9417-49f9e23d32d0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71e4aca9-e0bd-4a2d-ae20-9f2d05d78612",
                            Email = "user7@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@GMAIL.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAEAACcQAAAAEAaUuLEzrtKca83hfru1N9qa5mtpIvXIfEXeHShAI8P7wALvMjRFYHAN/2G8nKJHGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f790ac34-3cfd-418a-a1fd-908da14a2e7d",
                            TwoFactorEnabled = false,
                            UserName = "User7"
                        },
                        new
                        {
                            Id = "879e2584-ea1a-4811-9746-d07926c3df33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e273e5db-6e9c-41ff-9527-517a237bb6e7",
                            Email = "user8@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@GMAIL.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAEAACcQAAAAEAuAaw5O0wyCd8hMv+urMU2/WlifuhgTjp0PkOSZP1p/XntVzvwgGOBQ9fuDKVf2Kg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54798ad3-2eb8-4410-9883-7f4f809200b0",
                            TwoFactorEnabled = false,
                            UserName = "User8"
                        },
                        new
                        {
                            Id = "2c7d2a35-e853-41b0-b098-ce1ca27e06be",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe9e2a7b-a3f9-4fa7-9755-947f8b7c7f11",
                            Email = "user9@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@GMAIL.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAEAACcQAAAAEEjCh2LebUKM5ZBVKq4BvOILmump0jQvEwOc2x1MINqsKK8hO+DZnhAxpd+Q6/p0Sg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "db87c711-4349-4a31-af57-1cd74a680d8a",
                            TwoFactorEnabled = false,
                            UserName = "User9"
                        },
                        new
                        {
                            Id = "cb29c276-00c1-467a-b079-dacbcf8ee3a2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f7a8887-6cd6-40e8-a29f-e46a7c82b534",
                            Email = "user10@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@GMAIL.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAEAACcQAAAAEMJaeBkGKCbBtSU3P0wySu5POse4aK5TmEBddFblIe6lBfhm83HvKesfhrLUp+L+3g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "495e6dbb-e424-4f18-8e5a-9208c3c20d73",
                            TwoFactorEnabled = false,
                            UserName = "User10"
                        },
                        new
                        {
                            Id = "6f603342-c842-4210-9dce-97b119ce85f4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "983797a3-805a-4417-a38e-bcbd0a1553f2",
                            Email = "user11@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER11@GMAIL.COM",
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAEAACcQAAAAEGxxhb7VpHn8L6+ikfmA7MAcOJkuNhx283Uxo5lxqYEOeLUgMV69sG9M8YWF/UlIzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b40b0a2-4d44-480a-b155-cded613af0d6",
                            TwoFactorEnabled = false,
                            UserName = "User11"
                        },
                        new
                        {
                            Id = "37862d31-3f3e-4474-b4f6-65962f02dda8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d19b9bb-e31b-47cc-a551-a6e97929a621",
                            Email = "user12@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER12@GMAIL.COM",
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAEAACcQAAAAEKGzKmcG3B0w6No9UYyuv1oF59L1rig9S4Bz3HWC/UH6aL0Z0/a5idVJqXZ9B4bEMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d92176bb-2140-46fa-96b5-d92b704a5049",
                            TwoFactorEnabled = false,
                            UserName = "User12"
                        },
                        new
                        {
                            Id = "a2596045-b0f0-4a27-b600-830e966f74fc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27d97a59-286f-47fc-8dfc-d8ec9d952f54",
                            Email = "user13@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER13@GMAIL.COM",
                            NormalizedUserName = "USER13",
                            PasswordHash = "AQAAAAEAACcQAAAAEPFr3Q3vHBweIHLeYyA/1T6aJIs9WbpXXIYGIDQ/YcmhlAGqR3QTut2az+pb/1fNIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8370256d-1f3c-4119-a10d-5f9bfa245369",
                            TwoFactorEnabled = false,
                            UserName = "User13"
                        },
                        new
                        {
                            Id = "1dbc2279-bf37-4959-991d-14388103cddf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "208ad9c1-02d8-458a-af0d-32638913e826",
                            Email = "user14@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER14@GMAIL.COM",
                            NormalizedUserName = "USER14",
                            PasswordHash = "AQAAAAEAACcQAAAAEKKfshRqLMVOGaIz1hlCoCdtdKDDRuEu3EkfBMq23IU8Edh5zdLiH8RDXp5A1Qrtcw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80a54990-de1c-44e4-9953-87bad3fd6394",
                            TwoFactorEnabled = false,
                            UserName = "User14"
                        },
                        new
                        {
                            Id = "d3cfe5b2-ac95-4791-8615-765f49ea6707",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd62d6e3-d930-4a81-9a9d-fd03e86f2360",
                            Email = "user15@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER15@GMAIL.COM",
                            NormalizedUserName = "USER15",
                            PasswordHash = "AQAAAAEAACcQAAAAEKbpOPOFrHmFKEhZFciRmXH751Z4L/CePqSv1fLJULWgLl4X4C8smRsQiQt6eXAmwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85d1fa8c-7c4e-47a1-a7be-7b9dfd0fadd8",
                            TwoFactorEnabled = false,
                            UserName = "User15"
                        },
                        new
                        {
                            Id = "dc965086-2802-4f99-a257-b7a8b8d98442",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5c09c1e-79b6-4b0a-ad25-d8266af079b9",
                            Email = "user16@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER16@GMAIL.COM",
                            NormalizedUserName = "USER16",
                            PasswordHash = "AQAAAAEAACcQAAAAEHpo+UQTwITGHTkQAFnkPj4eINV/W11ZnQen/4N4kgGvpNOubW2CDv22HpG19YPC8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44d652f2-9b7f-4b26-bb28-bab45920f343",
                            TwoFactorEnabled = false,
                            UserName = "User16"
                        },
                        new
                        {
                            Id = "edd27651-f08b-4fcb-b468-7efbef598937",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "904eb3c7-9839-466b-8bd2-c59a7594afd0",
                            Email = "user17@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER17@GMAIL.COM",
                            NormalizedUserName = "USER17",
                            PasswordHash = "AQAAAAEAACcQAAAAEDzjCILNvF6t780RMjVL5arBxDFthRy1YFbfx95t2yz6ZuqlLda4viiM5TJzjC6eNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a87f0e2b-418b-4fa7-9228-7ada578d3bd3",
                            TwoFactorEnabled = false,
                            UserName = "User17"
                        },
                        new
                        {
                            Id = "9d73cad7-aa64-4fae-90bd-7e926b1ac09a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8db78bc8-3b70-49ba-a511-63b26f157927",
                            Email = "user18@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER18@GMAIL.COM",
                            NormalizedUserName = "USER18",
                            PasswordHash = "AQAAAAEAACcQAAAAEBVHd0dAuHCTIO8xKoCNM9h1M8rZHsnPnw3Hukt+g3CmrebBm6HEUqMHyfZnJ/BbcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "338b3e9a-8a1e-461b-af31-b2af14cdffaf",
                            TwoFactorEnabled = false,
                            UserName = "User18"
                        },
                        new
                        {
                            Id = "ea67ea48-d657-45aa-99d7-30f6ad9fe6cb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52dc94d8-9691-4864-b18d-5be6f46b7a0a",
                            Email = "user19@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER19@GMAIL.COM",
                            NormalizedUserName = "USER19",
                            PasswordHash = "AQAAAAEAACcQAAAAEPB1mmDttgxAXBuy0p+BEIKLWp+bzTmoVJaCVqCwAc6kUSku/nVRGABp8HUGggMLhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7dc013a7-3826-4191-b146-c644adbb731d",
                            TwoFactorEnabled = false,
                            UserName = "User19"
                        },
                        new
                        {
                            Id = "63291419-68d5-4000-bd2e-f7d38005e8a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53c67bc2-d672-47f6-975d-3bb3b21e1f05",
                            Email = "user20@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER20@GMAIL.COM",
                            NormalizedUserName = "USER20",
                            PasswordHash = "AQAAAAEAACcQAAAAEPSPrym5sBihp8QKwgSOy2nWMfmxepmS4xsXAxPBoVvR0Wdte1w5czQ2ut2jJsPf/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f54ba71-1d99-4f0f-8aea-46206503bdb6",
                            TwoFactorEnabled = false,
                            UserName = "User20"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "c7b37ddf-1b26-489d-be33-b31dfda151d7",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "ec0599a2-3af7-4554-bde9-1721bf7e1447",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "2dab0604-3b3d-444b-b8f0-cb7ad7268003",
                            Name = "ProjectViewer",
                            NormalizedName = "PROJECTVIEWER"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "35f8324f-5f4d-47ed-8fbf-e18a6d44bccf",
                            Name = "ProjectEditor",
                            NormalizedName = "PROJECTEDITOR"
                        },
                        new
                        {
                            Id = "5",
                            ConcurrencyStamp = "c0db0042-3f63-4c00-83fd-6eee2a7c4d38",
                            Name = "ProjectOwner",
                            NormalizedName = "PROJECTOWNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "8dcb9ccb-2ab5-4adf-9605-6b8804276370",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "8afd028d-4b23-4f39-81b9-8d7119684f91",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "8cce7a59-56e8-4ea9-b304-22d9921a12eb",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "b7a51167-e025-492e-92d0-addf051e9915",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "4523c412-16ed-4602-9bd2-f09b7debd462",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "3ef559c9-0f7a-4dce-b287-9b5525379d68",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "aacc55a6-c07c-43a7-9417-49f9e23d32d0",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "879e2584-ea1a-4811-9746-d07926c3df33",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2c7d2a35-e853-41b0-b098-ce1ca27e06be",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "cb29c276-00c1-467a-b079-dacbcf8ee3a2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "6f603342-c842-4210-9dce-97b119ce85f4",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "37862d31-3f3e-4474-b4f6-65962f02dda8",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "a2596045-b0f0-4a27-b600-830e966f74fc",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "1dbc2279-bf37-4959-991d-14388103cddf",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "d3cfe5b2-ac95-4791-8615-765f49ea6707",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "dc965086-2802-4f99-a257-b7a8b8d98442",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "edd27651-f08b-4fcb-b468-7efbef598937",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "9d73cad7-aa64-4fae-90bd-7e926b1ac09a",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "ea67ea48-d657-45aa-99d7-30f6ad9fe6cb",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "63291419-68d5-4000-bd2e-f7d38005e8a7",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ImageCore.Models.ContactModel", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", "ContactUser")
                        .WithMany()
                        .HasForeignKey("ContactUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImageCore.Models.FilterModel", b =>
                {
                    b.HasOne("ImageCore.Models.ImageLayerModel", "ImageLayer")
                        .WithMany()
                        .HasForeignKey("ImageLayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("Filters")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageLayer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ImageComponentModel", b =>
                {
                    b.HasOne("ImageCore.Models.ImageLayerModel", "ImageLayer")
                        .WithMany()
                        .HasForeignKey("ImageLayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ImageComponents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageLayer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ImageLayerModel", b =>
                {
                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ImageLayers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectParticipatorModel", b =>
                {
                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ProjectParticipators")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany("ProjectParticipators")
                        .HasForeignKey("UserId");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.Navigation("Filters");

                    b.Navigation("ImageComponents");

                    b.Navigation("ImageLayers");

                    b.Navigation("ProjectParticipators");
                });

            modelBuilder.Entity("ImageCore.Models.UserModel", b =>
                {
                    b.Navigation("ProjectParticipators");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
