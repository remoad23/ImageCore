// <auto-generated />
using System;
using ImageCore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ImageCore.Migrations
{
    [DbContext(typeof(ContextDb))]
    [Migration("20210528182811_InitialCreateImageCoreDb")]
    partial class InitialCreateImageCoreDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("ImageCore.Models.ContactModel", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactUserId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequestValidated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("ContactId");

                    b.HasIndex("ContactUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("ImageCore.Models.FilterModel", b =>
                {
                    b.Property<int>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilterType")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageLayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FilterId");

                    b.HasIndex("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("ImageCore.Models.ImageComponentModel", b =>
                {
                    b.Property<int>("ImageComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorMat")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageLayerId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("LocalX")
                        .HasColumnType("REAL");

                    b.Property<float>("LocalY")
                        .HasColumnType("REAL");

                    b.Property<float>("LocalZ")
                        .HasColumnType("REAL");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ImageComponentId");

                    b.HasIndex("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ImageComponent");
                });

            modelBuilder.Entity("ImageCore.Models.ImageLayerModel", b =>
                {
                    b.Property<int>("ImageLayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LayerType")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaskMat")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Opacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.Property<float>("X")
                        .HasColumnType("REAL");

                    b.Property<float>("Y")
                        .HasColumnType("REAL");

                    b.Property<float>("Z")
                        .HasColumnType("REAL");

                    b.HasKey("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ImageLayer");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            Name = "Projekt 1",
                            UserId = "f0aec08c-bd88-43d3-b642-bcc8d07373d9",
                            Views = 4355
                        },
                        new
                        {
                            ProjectId = 2,
                            Name = "Projekt 2",
                            UserId = "15168994-d69c-4336-bc6f-4c79f589863c",
                            Views = 4
                        },
                        new
                        {
                            ProjectId = 3,
                            Name = "Projekt 3",
                            UserId = "f0aec08c-bd88-43d3-b642-bcc8d07373d9",
                            Views = 345
                        },
                        new
                        {
                            ProjectId = 4,
                            Name = "Projekt 4",
                            UserId = "9205d848-10af-4f44-93ea-556192ba6621",
                            Views = 2
                        },
                        new
                        {
                            ProjectId = 5,
                            Name = "Projekt 5",
                            UserId = "b39aac06-3197-41d6-96a3-0bf789b03d93",
                            Views = 25
                        });
                });

            modelBuilder.Entity("ImageCore.Models.ProjectParticipatorModel", b =>
                {
                    b.Property<int>("ProjectParticipatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectParticipatorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectParticipator");
                });

            modelBuilder.Entity("ImageCore.Models.RoleModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ImageCore.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "f0aec08c-bd88-43d3-b642-bcc8d07373d9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7348229f-58f5-4ba2-8192-fa2a0ca0a623",
                            Email = "user1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@GMAIL.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAENkkveX6Mnt2tc9ZYJyJjA1SIzdYK0yyU5PGtEmfnaht1wscFgcnxVuu/g3+/mZAyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f121719-e1a0-444a-bff6-c6f5a018954f",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "9205d848-10af-4f44-93ea-556192ba6621",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a7d6b90-87cf-4c6f-8a40-0d80761ea9cc",
                            Email = "use2r@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@GMAIL.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAENXGKjmwyJfM4LvsbstoWzm/mheuEU6WfU50RN+/eIBoPrlnV3m41rzJA1qxVotzSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4926b42b-143b-4bdf-89ed-aa3a078e9713",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "b39aac06-3197-41d6-96a3-0bf789b03d93",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7806a21d-11d6-4ff4-8481-3b193a4e956c",
                            Email = "user3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@GMAIL.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEBPN5Et23dKWplYhdTC30IuYAPvudG4uX5tLqGRwqGlcur6CWMxfNEL/ygeL75mZ9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d2eac96-8aed-4bcc-8d81-f9351ed1b7a3",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "15168994-d69c-4336-bc6f-4c79f589863c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50036f3e-bcc4-42d1-8de7-980ce0b052bf",
                            Email = "user4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@GMAIL.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEAg5jwGL6smTUqTiyWmD6CV9Qo3l0azGSo7e2UCDo4wIe9jsp9IbuuKeKeYCaP8eyw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "edb0a736-31bb-4f03-a163-47ecf525a26c",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = "de7c6493-a81f-4f9e-bd3a-3e5545c6e420",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13cce161-11e1-469e-83e5-fb4e884486d0",
                            Email = "user5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@GMAIL.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAEAACcQAAAAEP7j133F7Y0j7G6UXDomJX8QgKUFRnbfoEO3O0uh79uj9AdwULdeWkG6f07IdNkBSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd7bf6b0-7d2f-480f-a003-01841d678a6f",
                            TwoFactorEnabled = false,
                            UserName = "User5"
                        },
                        new
                        {
                            Id = "92639a84-7cb7-480e-b57a-78fdee5f7f94",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12fe1971-14c2-4073-9aa1-d8614240564c",
                            Email = "user6@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@GMAIL.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAEAACcQAAAAECfbBEL9xtvKHQiKHPa7TKzSEGh+N9hLt8xB5yq79lr5sRXKIDujawchblHKBPkvlQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41ff040b-8b3d-4630-a2b6-8c3bba9c1af4",
                            TwoFactorEnabled = false,
                            UserName = "User6"
                        },
                        new
                        {
                            Id = "efa81a76-98d5-43fc-b3f9-6ea5dd561aa8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22b67c0e-695d-4acb-b7a6-e42fe544480f",
                            Email = "user7@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@GMAIL.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAEAACcQAAAAELgPWZIjUOBUfCnLUKsUYYMy93QCf2I1DFhYTXJ6ex2hOrH0r0ml8pZIXlmGsUvUZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb37c1ce-7b57-4e4e-bdbf-e9cf9247cff0",
                            TwoFactorEnabled = false,
                            UserName = "User7"
                        },
                        new
                        {
                            Id = "74db1bcd-e448-4ee9-8c2c-feac5d8c4915",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92b20139-e999-44a4-962a-569c40c48610",
                            Email = "user8@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@GMAIL.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAEAACcQAAAAEDyypcfpkt2gK4gFF6Xx03ZfO33rCwZPJPxvU6SvnXiWvfKBWwNeZMu4hvvFrtAzZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "057696be-32e3-47cc-a85d-125370a45d8a",
                            TwoFactorEnabled = false,
                            UserName = "User8"
                        },
                        new
                        {
                            Id = "9032338b-4db8-4619-8281-54ddc78a7f97",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e40adca-d884-47b1-84b2-467136a8ae5c",
                            Email = "user9@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@GMAIL.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAEAACcQAAAAEOlts6MYeA0eXWx+t8EnnUdqeQc0c9gZSlQ8IR4BPIeMREKB+3P7MbQhcf4D5CwDrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e4bfa662-880c-456a-a388-17e017e48e17",
                            TwoFactorEnabled = false,
                            UserName = "User9"
                        },
                        new
                        {
                            Id = "e60aa7b0-e21a-4058-965c-54e83996a163",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9dcbc84b-099b-4148-a968-34f3a9f93341",
                            Email = "user10@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@GMAIL.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAEAACcQAAAAEEbWm19C5M8Wp+cDej4bT3KZY1fmSMHnreV+8n0QIDzT/P1LtTZqWWh9w8Q30D22gA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "66c45811-0af0-49cc-9e5b-b26f93ba313d",
                            TwoFactorEnabled = false,
                            UserName = "User10"
                        },
                        new
                        {
                            Id = "fc978743-347f-4c33-a5bb-4b5a591d3bc9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98c9b569-df39-4fee-a1c8-9d58f856febd",
                            Email = "user11@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER11@GMAIL.COM",
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAEAACcQAAAAEGKG7uGygistgGjs0cn1gO0SRrZ4pIvutkoLIVaV/IIuFeaIdczEvS+w4iomlPJRxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "066cae3b-764a-4048-a6b0-099caa3b8c51",
                            TwoFactorEnabled = false,
                            UserName = "User11"
                        },
                        new
                        {
                            Id = "20b674be-9340-476e-a57a-b86b9442dcf8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ebadffd9-f5a9-4907-94e5-196cb02a5c4c",
                            Email = "user12@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER12@GMAIL.COM",
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAEAACcQAAAAEL3ky48Dvh4WWWb8+Pb7wwVj6GYYqrTxQ07HH2633cGnkD0I6w69HETeIaorLRNixg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9f35169-0486-4fda-a8c3-49ca3d49e683",
                            TwoFactorEnabled = false,
                            UserName = "User12"
                        },
                        new
                        {
                            Id = "09f1c1c1-71e7-46d9-8d3c-ed5f06da28c5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e958ef78-eae9-4d42-ae9f-4319cd3e4222",
                            Email = "user13@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER13@GMAIL.COM",
                            NormalizedUserName = "USER13",
                            PasswordHash = "AQAAAAEAACcQAAAAEDpNW2o0jBjLdDp/kfhpG6VvQm5BCZaNiNUdHY2iwLco3jibPIu7i4h/vMR+GW+vGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8259f044-5c94-4b9c-8de2-cd634597cf14",
                            TwoFactorEnabled = false,
                            UserName = "User13"
                        },
                        new
                        {
                            Id = "0218045a-dba4-420b-b24d-12b642afeb89",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7c9e5c6-0877-4a65-8a2f-1c395ec44171",
                            Email = "user14@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER14@GMAIL.COM",
                            NormalizedUserName = "USER14",
                            PasswordHash = "AQAAAAEAACcQAAAAEDs1CBZSt3WXwq9GbrHN+0bS511ArYy75CgJs8x3Ql39exAL2sWBPNZjXZYVABtlpA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "31e2b05a-dab7-4a3e-87ed-f9a51c338e1b",
                            TwoFactorEnabled = false,
                            UserName = "User14"
                        },
                        new
                        {
                            Id = "5b52264e-4380-4b6e-848c-bfcb607ff534",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1091adb6-c836-4a53-ac0d-0367f38f5d87",
                            Email = "user15@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER15@GMAIL.COM",
                            NormalizedUserName = "USER15",
                            PasswordHash = "AQAAAAEAACcQAAAAEEY5zmrZ7/ThCn+flR7QXHWYabU1b+Ak1lHk/czR3JZEHwWxnfch+Ezb/rHKRBHYOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "043e65d2-df6b-4352-8cb5-c1cf4eee072f",
                            TwoFactorEnabled = false,
                            UserName = "User15"
                        },
                        new
                        {
                            Id = "a0e86955-6ee1-4b77-b9d5-020dc6495427",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2b90510-f69e-4301-8017-cf2d38ff3673",
                            Email = "user16@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER16@GMAIL.COM",
                            NormalizedUserName = "USER16",
                            PasswordHash = "AQAAAAEAACcQAAAAELOpDnKqctCpr+MU0cTqvbg947NlGqLiGfu+9h1tSe0pCaBvyAEa6dZEZqaaLw1rGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07983e8b-79f5-498e-94e9-62242e3c92d7",
                            TwoFactorEnabled = false,
                            UserName = "User16"
                        },
                        new
                        {
                            Id = "d46001b2-2bac-4067-af2a-6d60028465e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf04fe38-ce8b-4153-8a79-62082b7ba57d",
                            Email = "user17@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER17@GMAIL.COM",
                            NormalizedUserName = "USER17",
                            PasswordHash = "AQAAAAEAACcQAAAAEO571OfSN5f37QAI7xcWVLEsZapnG7EsY9HKl/UWSkcPsI29K2JfMdpzEs8QyA/VqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6044b383-7304-46ac-ba17-46331e10e800",
                            TwoFactorEnabled = false,
                            UserName = "User17"
                        },
                        new
                        {
                            Id = "48429336-dfe9-4f29-b31e-613c4ca5a948",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "044f6056-2f79-4205-be02-81c3476367e4",
                            Email = "user18@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER18@GMAIL.COM",
                            NormalizedUserName = "USER18",
                            PasswordHash = "AQAAAAEAACcQAAAAEOE1lB1g727hwtiYsEPM9WyFOFtsI46KSchWniVdP5YjtLqMpyNEyRIqSN82tw1/QA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b9959de9-9b11-4d72-af32-13a61be6f39d",
                            TwoFactorEnabled = false,
                            UserName = "User18"
                        },
                        new
                        {
                            Id = "2e599054-ef98-4b28-b170-d9011308d2be",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "daec90e1-562c-47ff-ac3a-a4df0d05af59",
                            Email = "user19@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER19@GMAIL.COM",
                            NormalizedUserName = "USER19",
                            PasswordHash = "AQAAAAEAACcQAAAAEF0M99ZCCVJ1bG7Dz9jFTLmVoEdzkLAKnRaY2uMroUwFjoyI1Ok9iNC5Xw/pXBnmwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc404139-3e33-4bb5-8682-7edf5d2baf50",
                            TwoFactorEnabled = false,
                            UserName = "User19"
                        },
                        new
                        {
                            Id = "f4fdafb7-9e0d-42a2-ba53-8ac2494c9412",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8cde2adc-5cbd-4111-bc30-fe8739b02ee2",
                            Email = "user20@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER20@GMAIL.COM",
                            NormalizedUserName = "USER20",
                            PasswordHash = "AQAAAAEAACcQAAAAEN0XPev/Xgli4UiaD0jumjfhZhtjMICkMgm/pEP0343vLohVje5EMwBLMI6JRjHLyw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6b50374-eea8-4fa1-bbb1-57f55941851d",
                            TwoFactorEnabled = false,
                            UserName = "User20"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "5dc53032-fc30-439e-a1c6-d80652338882",
                            ConcurrencyStamp = "cfb33c2a-bcc1-4d0c-9f77-c6c1791c5278",
                            Name = "User"
                        },
                        new
                        {
                            Id = "6e21b649-eea3-4772-986a-41cd9eee8885",
                            ConcurrencyStamp = "1f12929a-87a5-490e-9eb6-e16bae7970b8",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "8e508d04-08a2-489f-9892-66df70e4eb39",
                            ConcurrencyStamp = "0c1a7e3e-671e-4813-a48f-781f916ecce6",
                            Name = "ProjectViewer"
                        },
                        new
                        {
                            Id = "9b8842fe-8352-4da6-9a74-d511ef4b7c01",
                            ConcurrencyStamp = "b7a26851-c164-41cf-9e1b-fb8a5d53f4bc",
                            Name = "ProjectEditor"
                        },
                        new
                        {
                            Id = "0f492921-3825-4d81-bb2d-67e2c8ba4fd5",
                            ConcurrencyStamp = "60ebdd2c-7c0f-43ba-96e9-2df47347c6ff",
                            Name = "ProjectOwner"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ImageCore.Models.ContactModel", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", "ContactUser")
                        .WithMany()
                        .HasForeignKey("ContactUserId");

                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ContactUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImageCore.Models.FilterModel", b =>
                {
                    b.HasOne("ImageCore.Models.ImageLayerModel", "ImageLayer")
                        .WithMany()
                        .HasForeignKey("ImageLayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("Filters")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageLayer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ImageComponentModel", b =>
                {
                    b.HasOne("ImageCore.Models.ImageLayerModel", "ImageLayer")
                        .WithMany()
                        .HasForeignKey("ImageLayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ImageComponents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageLayer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ImageLayerModel", b =>
                {
                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ImageLayers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectParticipatorModel", b =>
                {
                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ProjectParticipators")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany("ProjectParticipators")
                        .HasForeignKey("UserId");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.Navigation("Filters");

                    b.Navigation("ImageComponents");

                    b.Navigation("ImageLayers");

                    b.Navigation("ProjectParticipators");
                });

            modelBuilder.Entity("ImageCore.Models.UserModel", b =>
                {
                    b.Navigation("ProjectParticipators");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
