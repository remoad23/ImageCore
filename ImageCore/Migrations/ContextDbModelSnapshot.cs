// <auto-generated />
using System;
using ImageCore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ImageCore.Migrations
{
    [DbContext(typeof(ContextDb))]
    partial class ContextDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("ImageCore.Models.ContactModel", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactUserId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequestValidated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("ContactId");

                    b.HasIndex("ContactUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("ImageCore.Models.FilterModel", b =>
                {
                    b.Property<int>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilterType")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageLayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FilterId");

                    b.HasIndex("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("ImageCore.Models.ImageComponentModel", b =>
                {
                    b.Property<int>("ImageComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorMat")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageLayerId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("LocalX")
                        .HasColumnType("REAL");

                    b.Property<float>("LocalY")
                        .HasColumnType("REAL");

                    b.Property<float>("LocalZ")
                        .HasColumnType("REAL");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ImageComponentId");

                    b.HasIndex("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ImageComponent");
                });

            modelBuilder.Entity("ImageCore.Models.ImageLayerModel", b =>
                {
                    b.Property<int>("ImageLayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LayerType")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaskMat")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Opacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.Property<float>("X")
                        .HasColumnType("REAL");

                    b.Property<float>("Y")
                        .HasColumnType("REAL");

                    b.Property<float>("Z")
                        .HasColumnType("REAL");

                    b.HasKey("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ImageLayer");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            Name = "Projekt 1",
                            UserId = "89207ea8-db3c-4805-9c52-eecea3821874",
                            Views = 4355
                        },
                        new
                        {
                            ProjectId = 2,
                            Name = "Projekt 2",
                            UserId = "ab2f57aa-a773-40d7-ba6b-6e89c4c8c157",
                            Views = 4
                        },
                        new
                        {
                            ProjectId = 3,
                            Name = "Projekt 3",
                            UserId = "89207ea8-db3c-4805-9c52-eecea3821874",
                            Views = 345
                        },
                        new
                        {
                            ProjectId = 4,
                            Name = "Projekt 4",
                            UserId = "cd538641-f8d5-4639-a5e0-e4a8f1d9c0f8",
                            Views = 2
                        },
                        new
                        {
                            ProjectId = 5,
                            Name = "Projekt 5",
                            UserId = "5a5c9052-558b-4f9b-9ca8-598c5d878c49",
                            Views = 25
                        });
                });

            modelBuilder.Entity("ImageCore.Models.ProjectParticipatorModel", b =>
                {
                    b.Property<int>("ProjectParticipatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectParticipatorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectParticipator");
                });

            modelBuilder.Entity("ImageCore.Models.RoleModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ImageCore.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "89207ea8-db3c-4805-9c52-eecea3821874",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13f6f0a1-bea0-4f06-9a9a-cc07099265db",
                            Email = "user1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@GMAIL.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEDIvF68dylfb5SSwhirQuMDijO7K39Uk1jdh6e0tTTVGBCBHu/CtDynZ7U9WHPJMPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9cd37f36-0b3a-4745-9c13-eebd84521f32",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "cd538641-f8d5-4639-a5e0-e4a8f1d9c0f8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3e3f8d3-e480-408a-9e0f-298d5a9bf01d",
                            Email = "use2r@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@GMAIL.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEMwqBuLJ0M1oiGPZmmgFv63KlSgYeVJREr+sCNl5+D2kRpVoSkYPEpTFRZHwnvIZjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d06f3ee2-4659-4e72-ab8f-cff86a6f4eb2",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "5a5c9052-558b-4f9b-9ca8-598c5d878c49",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc250068-71ad-404c-af2d-69aad4baeff2",
                            Email = "user3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@GMAIL.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEFzRyC0uHeVd/c69xTTVvpHIreZu2gBxRcqfZIvJSWGxHq/9v4LkBhVR7eojjQ/5Ng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d20d2cf3-0d9b-4bf2-a6cc-5ad6c9a5b5b8",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "ab2f57aa-a773-40d7-ba6b-6e89c4c8c157",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "835115b1-9efc-4435-9171-bc900503cb84",
                            Email = "user4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@GMAIL.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEL6obAldxhAxUBkcKOR1L24moG+x8iEYnyi+66BMGlErtbR1VZL8gcCkHwJcnP2YNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5897c782-6ccb-4c7f-88d8-b6da9d68ed2e",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = "af4d1331-dff4-4127-99a4-019b657ec30f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f20996f8-3fb9-47e2-b6f0-d6d8f2a693c0",
                            Email = "user5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@GMAIL.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAEAACcQAAAAEIPrYvDSUFYCsgh1J8LEyWWXVuL5YZ6q/hn0Sy/1FrNGnqbXyTiIt/liqmnlEZNPvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc569ba2-f4e6-4837-a33c-c8b89a6e7dfa",
                            TwoFactorEnabled = false,
                            UserName = "User5"
                        },
                        new
                        {
                            Id = "5bfb394f-159f-415d-b702-c6839520d8e8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a285491-77e9-45b1-91c2-39a98de4d233",
                            Email = "user6@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@GMAIL.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAEAACcQAAAAEBJDGqiNOs9tSqZR9z7TQWE4DZii7xACgPETGZz3c2Bv85I8lp6GwSB1niuNIt/QNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ef2885f-79c5-49a3-b864-39a9ef4e7586",
                            TwoFactorEnabled = false,
                            UserName = "User6"
                        },
                        new
                        {
                            Id = "1e15461a-d1c2-496c-b3fa-614e33aa640d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8168c18-9532-4438-bbbd-1966d6c34bb6",
                            Email = "user7@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@GMAIL.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAEAACcQAAAAEMQdXYUFInHQ3RgspllHuWV2A+97XcTXs1BdPEA2ztUju8Qv9V+a2oxqmZRDUi24fw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0bd7018b-46af-40d7-ac1c-f4402f873729",
                            TwoFactorEnabled = false,
                            UserName = "User7"
                        },
                        new
                        {
                            Id = "ae5043b1-efd0-4d0e-803e-784b7c52ce20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7daab3e-c165-4264-95da-883ce9bec635",
                            Email = "user8@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@GMAIL.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAEAACcQAAAAEP5FWkrFDNlCphTjI/5MqV4VsPRdW7XQowOwhyfFnmM7RHWQVqHPxhrbmxPIOEHVxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3bfe926c-9a9f-450a-9d0f-96199ac2eaad",
                            TwoFactorEnabled = false,
                            UserName = "User8"
                        },
                        new
                        {
                            Id = "01c5dd2e-f095-4a08-a088-34121bf795bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d1e5ae18-52b9-4d41-af41-a8cc6c52e41b",
                            Email = "user9@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@GMAIL.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAEAACcQAAAAECJ2aIYBmHILFb4x9YnmiBytyuAEK0op8NGbZ0nGeGfAOWTOdR3uUiy+C0/2k5jRJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98b00d00-1567-49d4-b597-1f53cd911dbf",
                            TwoFactorEnabled = false,
                            UserName = "User9"
                        },
                        new
                        {
                            Id = "989df044-e8b1-4767-800a-0d1aeaada93c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b19c7dde-cae2-437a-926c-80b6984267fb",
                            Email = "user10@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@GMAIL.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAEAACcQAAAAEFmDvyyBq66YxWbiEyqp5TqYtWTApdf0l2gHBbw92+o9/JuLOB3enrWLB8kRwSTWQw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c28e5c7-c18e-43dd-b597-dba9bbc9fcb9",
                            TwoFactorEnabled = false,
                            UserName = "User10"
                        },
                        new
                        {
                            Id = "0c285106-0692-4e0d-86d6-092361c66644",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec19d90d-ea10-4aed-8582-9d26f07f2e21",
                            Email = "user11@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER11@GMAIL.COM",
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAEAACcQAAAAEH1q2tcpkE5tZeM18Ms8yH0lJ7eUO6JKKl46C5rrvF6zFavHjb23ZkuW6Gebq2Qhiw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7e905e5-c2d3-44aa-af38-fbaa010ded33",
                            TwoFactorEnabled = false,
                            UserName = "User11"
                        },
                        new
                        {
                            Id = "06144c21-8eac-43c4-8874-cd24f6c0b041",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54a01ecb-e16e-45b2-a1a5-007fd2ea79c4",
                            Email = "user12@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER12@GMAIL.COM",
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAEAACcQAAAAEEZMtMtTjJxshwObmvuNuM22fm6sPE4cNGdljeVEWhQx78S+1N2BREKm7yxhr+we4A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddaa4a6c-7248-4f90-9eed-1690466318fe",
                            TwoFactorEnabled = false,
                            UserName = "User12"
                        },
                        new
                        {
                            Id = "310cc86e-88c7-48de-92d6-49747ec1dacf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8c86c52-498c-4102-a7a7-1387463415e1",
                            Email = "user13@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER13@GMAIL.COM",
                            NormalizedUserName = "USER13",
                            PasswordHash = "AQAAAAEAACcQAAAAEP1jrcX++YGZE/ea5IyTckf7nHUQZquXQY6d4JTayXswKZtU0PbEuJWs1yVlVwwEuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95c684fe-e48b-4d17-9137-ba7df57fd6e5",
                            TwoFactorEnabled = false,
                            UserName = "User13"
                        },
                        new
                        {
                            Id = "1007ae44-de0a-44fb-81be-d3f224b10f45",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9bb80738-a91b-402e-8370-7987757c8d84",
                            Email = "user14@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER14@GMAIL.COM",
                            NormalizedUserName = "USER14",
                            PasswordHash = "AQAAAAEAACcQAAAAEPT+d/b4/P34CwFJ5oxGxpFs3+BWgirWoL8UGUVpfjaBEFt6TPXZhStk1V05Mxp8fg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d83c4614-11db-401d-ad01-313329be39dc",
                            TwoFactorEnabled = false,
                            UserName = "User14"
                        },
                        new
                        {
                            Id = "e0643e72-2c84-412b-944b-747aba2cff5d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "395334ca-7a1a-4a5f-8674-d95002b4af71",
                            Email = "user15@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER15@GMAIL.COM",
                            NormalizedUserName = "USER15",
                            PasswordHash = "AQAAAAEAACcQAAAAEMY47W59V9wvif4GDUTsUHtm4nbpWkhKVJwlxKRBhp5zeE4cYiW3lTYZ+df1H/jTdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "520ad57d-b3ab-4b1e-becc-4d0169860f25",
                            TwoFactorEnabled = false,
                            UserName = "User15"
                        },
                        new
                        {
                            Id = "72ef660d-897b-42bb-a5c1-449d03c163f0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88872068-2f5a-42f1-8f39-58bad905d8ee",
                            Email = "user16@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER16@GMAIL.COM",
                            NormalizedUserName = "USER16",
                            PasswordHash = "AQAAAAEAACcQAAAAEGqB/P+Y7gkNVgAhLZz2HGZ4jeYVczTQr5k62shZ5j2f8voWEQZHg89TDze5ANmikw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c09f91d6-d7be-44e5-b275-514d1c6e6485",
                            TwoFactorEnabled = false,
                            UserName = "User16"
                        },
                        new
                        {
                            Id = "909b9741-71c0-4d38-b891-de05ffebf4b0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c5ddf34e-d73f-4021-94d2-1e4b2300e1d4",
                            Email = "user17@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER17@GMAIL.COM",
                            NormalizedUserName = "USER17",
                            PasswordHash = "AQAAAAEAACcQAAAAEPiH6xRg526x32cMqL8bTNN06HzjOupAPeHUXQOuAg2JOW5XsuzmfzLktHuxw/l7bg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d580ca42-9231-4e19-b74d-d4b0a4f1cc31",
                            TwoFactorEnabled = false,
                            UserName = "User17"
                        },
                        new
                        {
                            Id = "304e023a-d0af-4efc-8642-8e171ece240d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90f618bc-58fc-4067-b484-bee6328f7dac",
                            Email = "user18@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER18@GMAIL.COM",
                            NormalizedUserName = "USER18",
                            PasswordHash = "AQAAAAEAACcQAAAAECr0v6cNaAQvqN2o/80eyZm5x2KU8/vthNd/qrcAxCUdDzaFuKUTMTIAMYqD2IY2hQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9eda10ed-6a39-4c3c-bc10-f14e148fbede",
                            TwoFactorEnabled = false,
                            UserName = "User18"
                        },
                        new
                        {
                            Id = "607374f1-193f-4aa6-986f-5e243e98d8df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fab4c24c-9dfc-4071-a64c-cf766241db56",
                            Email = "user19@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER19@GMAIL.COM",
                            NormalizedUserName = "USER19",
                            PasswordHash = "AQAAAAEAACcQAAAAEA8ppr3jB8eOJGIH3opqjIBdbD9jvMohqKvlBt9UfhgT6LnXDXUUDtwtd6KK+LDF+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7388043f-b9a1-44c2-93c5-cd40b9d462ad",
                            TwoFactorEnabled = false,
                            UserName = "User19"
                        },
                        new
                        {
                            Id = "ab6fb151-a460-4255-a05c-c2d7b736af0e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "deee2b1d-d731-4659-bb45-8c288eec4bc0",
                            Email = "user20@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER20@GMAIL.COM",
                            NormalizedUserName = "USER20",
                            PasswordHash = "AQAAAAEAACcQAAAAEDyznMo8yclNQ6h7vJFNn0LQ4mNT2Q8Q4ENZvT+vQUW6p3LD3mBAW7BG+GBld33RMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80e1ea77-bd1c-411b-8ddf-16111a08ac0c",
                            TwoFactorEnabled = false,
                            UserName = "User20"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "8088f9b3-ad28-400e-8e3a-1a71800817d2",
                            ConcurrencyStamp = "81c03471-dd51-4aa3-8f3b-63c0d170efaa",
                            Name = "User"
                        },
                        new
                        {
                            Id = "b29f95bf-ea2b-4055-8104-7b394e3547b2",
                            ConcurrencyStamp = "51773621-4040-4f32-9182-6b3eb4ecb426",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "99a6540e-5af8-40cf-8ba3-7aeb73f2ddce",
                            ConcurrencyStamp = "004e433d-4ad1-48ef-b354-eca379ef3cd1",
                            Name = "ProjectViewer"
                        },
                        new
                        {
                            Id = "b58f9fa3-0247-484e-9021-198aee4d8f8c",
                            ConcurrencyStamp = "1ae0a862-48da-49e2-9221-cbccf4280804",
                            Name = "ProjectEditor"
                        },
                        new
                        {
                            Id = "563b4687-5de7-4b52-80e6-4f30cb764e27",
                            ConcurrencyStamp = "af9860ac-b5db-4231-9c13-1652b9cfd102",
                            Name = "ProjectOwner"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ImageCore.Models.ContactModel", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", "ContactUser")
                        .WithMany()
                        .HasForeignKey("ContactUserId");

                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ContactUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImageCore.Models.FilterModel", b =>
                {
                    b.HasOne("ImageCore.Models.ImageLayerModel", "ImageLayer")
                        .WithMany()
                        .HasForeignKey("ImageLayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("Filters")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageLayer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ImageComponentModel", b =>
                {
                    b.HasOne("ImageCore.Models.ImageLayerModel", "ImageLayer")
                        .WithMany()
                        .HasForeignKey("ImageLayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ImageComponents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageLayer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ImageLayerModel", b =>
                {
                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ImageLayers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectParticipatorModel", b =>
                {
                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ProjectParticipators")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany("ProjectParticipators")
                        .HasForeignKey("UserId");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.Navigation("Filters");

                    b.Navigation("ImageComponents");

                    b.Navigation("ImageLayers");

                    b.Navigation("ProjectParticipators");
                });

            modelBuilder.Entity("ImageCore.Models.UserModel", b =>
                {
                    b.Navigation("ProjectParticipators");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
