// <auto-generated />
using System;
using ImageCore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ImageCore.Migrations
{
    [DbContext(typeof(ContextDb))]
    partial class ContextDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("ImageCore.Models.ContactModel", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequestValidated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ContactId");

                    b.HasIndex("ContactUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("ImageCore.Models.FilterModel", b =>
                {
                    b.Property<int>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilterType")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageLayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FilterId");

                    b.HasIndex("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("ImageCore.Models.ImageComponentModel", b =>
                {
                    b.Property<int>("ImageComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorMat")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageLayerId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("LocalX")
                        .HasColumnType("REAL");

                    b.Property<float>("LocalY")
                        .HasColumnType("REAL");

                    b.Property<float>("LocalZ")
                        .HasColumnType("REAL");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ImageComponentId");

                    b.HasIndex("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ImageComponent");
                });

            modelBuilder.Entity("ImageCore.Models.ImageLayerModel", b =>
                {
                    b.Property<int>("ImageLayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LayerType")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaskMat")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Opacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.Property<float>("X")
                        .HasColumnType("REAL");

                    b.Property<float>("Y")
                        .HasColumnType("REAL");

                    b.Property<float>("Z")
                        .HasColumnType("REAL");

                    b.HasKey("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ImageLayer");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            Name = "Projekt 1",
                            UserId = "5b62522c-4e66-48a9-93ae-215c1a34eb46",
                            Views = 4355
                        },
                        new
                        {
                            ProjectId = 2,
                            Name = "Projekt 2",
                            UserId = "d22954d9-cd82-4b1a-907d-a5990f2a67db",
                            Views = 4
                        },
                        new
                        {
                            ProjectId = 3,
                            Name = "Projekt 3",
                            UserId = "5b62522c-4e66-48a9-93ae-215c1a34eb46",
                            Views = 345
                        },
                        new
                        {
                            ProjectId = 4,
                            Name = "Projekt 4",
                            UserId = "ea40e62a-7efe-4ca3-b8eb-62ed84e44b40",
                            Views = 2
                        },
                        new
                        {
                            ProjectId = 5,
                            Name = "Projekt 5",
                            UserId = "9156194a-52a5-49d1-b9d2-de25df3128ac",
                            Views = 25
                        });
                });

            modelBuilder.Entity("ImageCore.Models.ProjectParticipatorModel", b =>
                {
                    b.Property<int>("ProjectParticipatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectParticipatorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectParticipator");

                    b.HasData(
                        new
                        {
                            ProjectParticipatorId = 1,
                            ProjectId = 1,
                            UserId = "5b62522c-4e66-48a9-93ae-215c1a34eb46"
                        },
                        new
                        {
                            ProjectParticipatorId = 2,
                            ProjectId = 1,
                            UserId = "ea40e62a-7efe-4ca3-b8eb-62ed84e44b40"
                        },
                        new
                        {
                            ProjectParticipatorId = 3,
                            ProjectId = 1,
                            UserId = "9156194a-52a5-49d1-b9d2-de25df3128ac"
                        },
                        new
                        {
                            ProjectParticipatorId = 4,
                            ProjectId = 2,
                            UserId = "ea40e62a-7efe-4ca3-b8eb-62ed84e44b40"
                        },
                        new
                        {
                            ProjectParticipatorId = 5,
                            ProjectId = 2,
                            UserId = "d22954d9-cd82-4b1a-907d-a5990f2a67db"
                        },
                        new
                        {
                            ProjectParticipatorId = 6,
                            ProjectId = 3,
                            UserId = "5b62522c-4e66-48a9-93ae-215c1a34eb46"
                        },
                        new
                        {
                            ProjectParticipatorId = 7,
                            ProjectId = 4,
                            UserId = "5b62522c-4e66-48a9-93ae-215c1a34eb46"
                        },
                        new
                        {
                            ProjectParticipatorId = 8,
                            ProjectId = 4,
                            UserId = "ea40e62a-7efe-4ca3-b8eb-62ed84e44b40"
                        },
                        new
                        {
                            ProjectParticipatorId = 9,
                            ProjectId = 4,
                            UserId = "9156194a-52a5-49d1-b9d2-de25df3128ac"
                        },
                        new
                        {
                            ProjectParticipatorId = 10,
                            ProjectId = 4,
                            UserId = "d22954d9-cd82-4b1a-907d-a5990f2a67db"
                        },
                        new
                        {
                            ProjectParticipatorId = 11,
                            ProjectId = 5,
                            UserId = "5b62522c-4e66-48a9-93ae-215c1a34eb46"
                        },
                        new
                        {
                            ProjectParticipatorId = 12,
                            ProjectId = 5,
                            UserId = "ea40e62a-7efe-4ca3-b8eb-62ed84e44b40"
                        },
                        new
                        {
                            ProjectParticipatorId = 13,
                            ProjectId = 5,
                            UserId = "9156194a-52a5-49d1-b9d2-de25df3128ac"
                        },
                        new
                        {
                            ProjectParticipatorId = 14,
                            ProjectId = 5,
                            UserId = "d22954d9-cd82-4b1a-907d-a5990f2a67db"
                        },
                        new
                        {
                            ProjectParticipatorId = 15,
                            ProjectId = 5,
                            UserId = "6230325b-c1be-4327-8f85-d8c86eda36fd"
                        });
                });

            modelBuilder.Entity("ImageCore.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("image")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "5b62522c-4e66-48a9-93ae-215c1a34eb46",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "566e7b6b-30ed-4fe7-9517-9a21329ecbc7",
                            Email = "imagecore23@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IMAGECORE23@GMAIL.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKeSGE0ml5MjTtjULQTOMdD7hixS4OSzVnfBNoElQN8yIW0tM0uv53Q/uh/8lfzAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc6b3577-3548-4c1a-a21a-ac4019ab7fca",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "ea40e62a-7efe-4ca3-b8eb-62ed84e44b40",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73bdf200-1643-498c-b308-ec4b96d34b48",
                            Email = "imagecore24@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IMAGECORE24@GMAIL.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEFfamiiSdFXwUaDC1dQPse86ZaplDvDp7fHweQMmP9awZoQdPvAfLxi83hrFrCf3Zg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "689ec70f-66b5-4b5c-8e61-e6c003330362",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "9156194a-52a5-49d1-b9d2-de25df3128ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f61c86b-f6ca-484d-b2dc-e61acd899683",
                            Email = "imagecoreuser@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IMAGECOREUSER@GMAIL.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEIQvvbReCp6bfVg/lFBm30DOK1QCiRHtU8c9ZGs/bTRwN98Lo4YLO3JXiUDVdCnpLw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49ec45ed-3db8-463e-b442-dedb4df92bfb",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "d22954d9-cd82-4b1a-907d-a5990f2a67db",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2b360fbf-0b57-470e-83ff-a528662c5cc2",
                            Email = "user4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@GMAIL.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEO6+HVxKiZU5GYdXNOjKKvnNRAnluFgNFLFSmNc+XiONlvP82C92zxI0tbyNyrgHVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6a84f99-59f7-4f4e-b0d6-19a8e3f2c0bf",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = "6230325b-c1be-4327-8f85-d8c86eda36fd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54187dad-88a8-44d6-9435-ca478759af5b",
                            Email = "user5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@GMAIL.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAEAACcQAAAAEEW0JLJUvuAoF9Y1tdAmf7brmus2LXabSFt/OktNEPPRUQ2JxYyXcMvSGnQXBdZpEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0dad87e-f4e9-43cc-ada3-f0ada221c904",
                            TwoFactorEnabled = false,
                            UserName = "User5"
                        },
                        new
                        {
                            Id = "ebdc5979-98be-419d-88a6-ea628188621d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c1f8383-bf7f-4007-adbd-224671e69138",
                            Email = "user6@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@GMAIL.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAEAACcQAAAAEHOtsdw4Wq0gkqUQgV2TbFPyp2D80nti1nBsZp2NgkHayojlh7AVlUlqk1Ni+/CzyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "661dc35e-d3b7-4aff-b4f7-cca598407e1d",
                            TwoFactorEnabled = false,
                            UserName = "User6"
                        },
                        new
                        {
                            Id = "98d8ec04-7b05-4b80-93a9-551cb773b945",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c2f5b1ee-50d6-4166-b06f-75ca4a4ba42c",
                            Email = "user7@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@GMAIL.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAEAACcQAAAAEFJOoz15mmZvRG8IuaNmA3ffoGuNJ3KC/CR0yBvRAONg3Juxa5hFH69O5OjVttPVhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73aa4181-a870-412f-b111-20d9ab8064b5",
                            TwoFactorEnabled = false,
                            UserName = "User7"
                        },
                        new
                        {
                            Id = "0607b101-cd61-4cbd-bb4a-1aa4c7fa18b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49c5ede3-f2e4-42e7-a329-1b3c2ab49065",
                            Email = "user8@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@GMAIL.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAEAACcQAAAAENSfWxwAmQaCL8gol8OvyxENb+rcDOnA6XMRyFKsuEPNzFmJPP1WHrJIyKjQkIimng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b635125-c895-43e1-b87e-bdd764acb504",
                            TwoFactorEnabled = false,
                            UserName = "User8"
                        },
                        new
                        {
                            Id = "a3614c3c-e893-4c93-9172-10a7551e01a9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd0b82f2-d93a-42be-af2c-7989ac74dd7d",
                            Email = "user9@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@GMAIL.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAEAACcQAAAAEOOmpqwDOgEo5l0JdLmmp7kcOxdHsgPHCRHhC2QfwJ5rpyGOb/E1gDVe253xqKhWgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd9745a0-5c66-4f49-8e92-f8d287eb5ddc",
                            TwoFactorEnabled = false,
                            UserName = "User9"
                        },
                        new
                        {
                            Id = "de9285b1-59b7-4258-850f-f0bdf49d8126",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b4632a90-4238-4336-a133-1b49b7895a94",
                            Email = "user10@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@GMAIL.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAEAACcQAAAAEFihak3FYHmNCyWDT3jj8O9nE6U/Q28OD+8B59z/4d+20/KNOcQ58KJyLj9VC2QR/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "635506bd-c951-41aa-b3f2-8a5bf6f95026",
                            TwoFactorEnabled = false,
                            UserName = "User10"
                        },
                        new
                        {
                            Id = "82273e21-7117-42e4-b2ea-fb34008f487f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "392b40a7-1456-42a5-b637-779eee4705be",
                            Email = "user11@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER11@GMAIL.COM",
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAEAACcQAAAAEGonj9d5/tIGRlQcS9mE9rLSn5x6oz9dyWalxZrFYOacA/pNM5knWyJGMb04YjeoHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3ce1d022-ee98-40d5-bcb1-f545da259249",
                            TwoFactorEnabled = false,
                            UserName = "User11"
                        },
                        new
                        {
                            Id = "a9078de7-bf91-4b7b-91f9-52dac87a572a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6469aef-7831-4dba-bb7b-efd4bc3f62cf",
                            Email = "user12@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER12@GMAIL.COM",
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAEAACcQAAAAENB0U7ZnJ2K/OP7pCIl24MSciAQEatVaaHckVlOblFDrStgIURa6FVHCH1i41eO3FQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8e25a44-7352-4b2f-b2f9-aa873575cb97",
                            TwoFactorEnabled = false,
                            UserName = "User12"
                        },
                        new
                        {
                            Id = "ff11b377-faca-438b-94b7-441253700a87",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b4ef701-f1bd-4420-8ad9-04bc45d58112",
                            Email = "user13@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER13@GMAIL.COM",
                            NormalizedUserName = "USER13",
                            PasswordHash = "AQAAAAEAACcQAAAAEBp1cIpvAEY4HzSiZ32Vnp0/IzA8eT0gRkFGHEPWcD4yyyeVLIQ8G9ujTYKis0ajlQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67a6f1f5-7819-41d7-b824-562fbb328921",
                            TwoFactorEnabled = false,
                            UserName = "User13"
                        },
                        new
                        {
                            Id = "8a6c9de8-b726-4990-8dbf-921dde7f416f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d1822eeb-99d5-496d-a3fd-8696f3ebd332",
                            Email = "user14@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER14@GMAIL.COM",
                            NormalizedUserName = "USER14",
                            PasswordHash = "AQAAAAEAACcQAAAAEBPNuOWERhRXDVP8YXmzMOO4U7NLTA5nEoVVtaFwFM5MjL5yYBiYUzF5LdqxgpAqPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f736bc82-c635-4498-be55-4dd383ef5354",
                            TwoFactorEnabled = false,
                            UserName = "User14"
                        },
                        new
                        {
                            Id = "05446c12-e92b-4328-a86a-0480d52f0e65",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2ff2059-b700-461b-ae76-ffb622730311",
                            Email = "user15@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER15@GMAIL.COM",
                            NormalizedUserName = "USER15",
                            PasswordHash = "AQAAAAEAACcQAAAAEOaQrsGQkA4i9o9Y9xasL7Hvc29wqsZCxnc8vmPAgcamIuamJ6mGzaJU7Y9CVp+2mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1229d04c-254e-474c-85f7-5d4c219658b5",
                            TwoFactorEnabled = false,
                            UserName = "User15"
                        },
                        new
                        {
                            Id = "4584f122-2c31-479b-8e0d-23e198695941",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ecfff864-39ab-4119-b06a-05bf0278c872",
                            Email = "user16@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER16@GMAIL.COM",
                            NormalizedUserName = "USER16",
                            PasswordHash = "AQAAAAEAACcQAAAAEM6Tw+Lj38NrsWc0+gSLmUN6+lJcqwuUrCYHxviZBYt7AzUoFidyPbFeMn7XXsULZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "112d5d29-0d59-459f-8493-93099c2b379c",
                            TwoFactorEnabled = false,
                            UserName = "User16"
                        },
                        new
                        {
                            Id = "a000c3ae-55cb-4561-b4b2-3d78c9995e93",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0cea43f-7775-4955-941e-5cc555084b88",
                            Email = "user17@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER17@GMAIL.COM",
                            NormalizedUserName = "USER17",
                            PasswordHash = "AQAAAAEAACcQAAAAECmQGvN9VdlMhkhNV7Tq3o5k/Lw58duSZ52McLMDTsOHejosc8hjPJHi96EkAbrELQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b1b7ed8-20b5-49ad-8272-9eabee2a6d5f",
                            TwoFactorEnabled = false,
                            UserName = "User17"
                        },
                        new
                        {
                            Id = "8b018a86-c4c6-4cae-b9d6-eebdb8690aa2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac7829cf-d546-4c91-b878-0fe7d1c76bc1",
                            Email = "user18@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER18@GMAIL.COM",
                            NormalizedUserName = "USER18",
                            PasswordHash = "AQAAAAEAACcQAAAAECCSFpU0mTTKaGzrI099vpZizsISh7RIpGKaWtPZN0JQnDK9XedMgOeq2yIuWlspYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "396c78f6-f7fb-4de3-9fd1-bff322c879bf",
                            TwoFactorEnabled = false,
                            UserName = "User18"
                        },
                        new
                        {
                            Id = "17a40687-7328-4b60-8437-a2970c6dee9e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6ede242f-1404-4d06-9ae5-5e01089f5471",
                            Email = "user19@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER19@GMAIL.COM",
                            NormalizedUserName = "USER19",
                            PasswordHash = "AQAAAAEAACcQAAAAEJbwNeQQoEKJGQ4w4jMF3bedrt833Mcd1MUzx4o4k+BcN4fPLDpTpb07FLvl5+MMRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0cb9194a-f302-4c32-b598-181a1265bcd9",
                            TwoFactorEnabled = false,
                            UserName = "User19"
                        },
                        new
                        {
                            Id = "499e387c-7b84-4fc2-894c-3ea4b4ec69a1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f49055dc-09bc-4257-a7e6-5daf197c6782",
                            Email = "user20@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER20@GMAIL.COM",
                            NormalizedUserName = "USER20",
                            PasswordHash = "AQAAAAEAACcQAAAAEKyukCLVGXkJH9LIhCtvqpwuY7CLK7HuaUncDJqi5RQNcVlSfCQTmX0miNRTJTvW2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86a011ad-d5bf-4c28-bbf2-dee569227f3b",
                            TwoFactorEnabled = false,
                            UserName = "User20"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "543ef6a5-74e0-4690-ba64-789f32ef9497",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "4c707822-b9ad-4b4f-9e79-a297b312747f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "aabf7f44-afac-442c-a77f-ab7e948e6e7c",
                            Name = "ProjectViewer",
                            NormalizedName = "PROJECTVIEWER"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "262fc076-a595-45ac-bd3f-d8c9026891f1",
                            Name = "ProjectEditor",
                            NormalizedName = "PROJECTEDITOR"
                        },
                        new
                        {
                            Id = "5",
                            ConcurrencyStamp = "d0319d2c-3c81-4521-a320-73a3ae3d79f0",
                            Name = "ProjectOwner",
                            NormalizedName = "PROJECTOWNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "5b62522c-4e66-48a9-93ae-215c1a34eb46",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "ea40e62a-7efe-4ca3-b8eb-62ed84e44b40",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "9156194a-52a5-49d1-b9d2-de25df3128ac",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "d22954d9-cd82-4b1a-907d-a5990f2a67db",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "6230325b-c1be-4327-8f85-d8c86eda36fd",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "ebdc5979-98be-419d-88a6-ea628188621d",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "98d8ec04-7b05-4b80-93a9-551cb773b945",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "0607b101-cd61-4cbd-bb4a-1aa4c7fa18b2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "a3614c3c-e893-4c93-9172-10a7551e01a9",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "de9285b1-59b7-4258-850f-f0bdf49d8126",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "82273e21-7117-42e4-b2ea-fb34008f487f",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "a9078de7-bf91-4b7b-91f9-52dac87a572a",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "ff11b377-faca-438b-94b7-441253700a87",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "8a6c9de8-b726-4990-8dbf-921dde7f416f",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "05446c12-e92b-4328-a86a-0480d52f0e65",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "4584f122-2c31-479b-8e0d-23e198695941",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "a000c3ae-55cb-4561-b4b2-3d78c9995e93",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "8b018a86-c4c6-4cae-b9d6-eebdb8690aa2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "17a40687-7328-4b60-8437-a2970c6dee9e",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "499e387c-7b84-4fc2-894c-3ea4b4ec69a1",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ImageCore.Models.ContactModel", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", "ContactUser")
                        .WithMany()
                        .HasForeignKey("ContactUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImageCore.Models.FilterModel", b =>
                {
                    b.HasOne("ImageCore.Models.ImageLayerModel", "ImageLayer")
                        .WithMany()
                        .HasForeignKey("ImageLayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("Filters")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageLayer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ImageComponentModel", b =>
                {
                    b.HasOne("ImageCore.Models.ImageLayerModel", "ImageLayer")
                        .WithMany()
                        .HasForeignKey("ImageLayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ImageComponents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageLayer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ImageLayerModel", b =>
                {
                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ImageLayers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectParticipatorModel", b =>
                {
                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ProjectParticipators")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany("ProjectParticipators")
                        .HasForeignKey("UserId");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.Navigation("Filters");

                    b.Navigation("ImageComponents");

                    b.Navigation("ImageLayers");

                    b.Navigation("ProjectParticipators");
                });

            modelBuilder.Entity("ImageCore.Models.UserModel", b =>
                {
                    b.Navigation("ProjectParticipators");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
