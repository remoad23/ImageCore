// <auto-generated />
using System;
using ImageCore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ImageCore.Migrations
{
    [DbContext(typeof(ContextDb))]
    partial class ContextDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("ImageCore.Models.ContactModel", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("ContactId");

                    b.HasIndex("ContactUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("ImageCore.Models.FilterModel", b =>
                {
                    b.Property<int>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilterType")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageLayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FilterId");

                    b.HasIndex("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("ImageCore.Models.ImageComponentModel", b =>
                {
                    b.Property<int>("ImageComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorMat")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageLayerId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("LocalX")
                        .HasColumnType("REAL");

                    b.Property<float>("LocalY")
                        .HasColumnType("REAL");

                    b.Property<float>("LocalZ")
                        .HasColumnType("REAL");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ImageComponentId");

                    b.HasIndex("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ImageComponent");
                });

            modelBuilder.Entity("ImageCore.Models.ImageLayerModel", b =>
                {
                    b.Property<int>("ImageLayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LayerType")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaskMat")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Opacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.Property<float>("X")
                        .HasColumnType("REAL");

                    b.Property<float>("Y")
                        .HasColumnType("REAL");

                    b.Property<float>("Z")
                        .HasColumnType("REAL");

                    b.HasKey("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ImageLayer");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectParticipatorModel", b =>
                {
                    b.Property<int>("ProjectParticipatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectParticipatorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectParticipator");
                });

            modelBuilder.Entity("ImageCore.Models.RoleModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ImageCore.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "80daa7e3-48d6-4283-b9c4-cc290fa3e4c0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03a1a02d-dbed-4dc5-84d0-6cecac5adc60",
                            Email = "user1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@GMAIL.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEIFjfRRajBimcPF5xP9wuUJ0qQ9awls9rlTOVXkDMxNINpcADgZujJRteTOIwsGuvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c3cf53b2-daee-4f46-ad91-29f8afd250c3",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "9645685d-5374-492d-a039-b956465f414b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ef776dfb-2ebf-489a-a97c-d4a238c832de",
                            Email = "use2r@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@GMAIL.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEMrcLLqaZCuxF/PZfTNU+kZf3B5aa4cBqd+VaJ/pzEYotKAnmw9PwRApBGHAj8Ep7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "53fb1eeb-5c17-41ef-9ffc-e4f389ef0e19",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "6172c0fa-c097-4eb7-9263-bbbdd96f8c96",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b623ce4-4b64-44fd-a57a-19001d05fbf1",
                            Email = "user3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@GMAIL.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEK+pUay6noiHyw79iAaI3KX/hxrhqQpDb4RHzSd8QVdFIg+Rky9uYxdoNfIXTQqCFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c858fb71-4eac-4395-a6ad-ceed9042424b",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "e120fc25-75b9-4620-a5bc-f5697c1c3c5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6976acf2-478c-481e-821c-81520ef4f690",
                            Email = "user4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@GMAIL.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEJR0Pkjb6F/IJQviEE56hM3QCpMJhE59vWWIE1OTeztZT2/oAJatxF4iLiqKbpdxdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "22a12520-fe64-47e1-a0fa-9b0215f34a27",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = "9190c929-3496-4adf-8c15-404a8766bf3c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d46316ff-00ef-4193-a898-32cb5c44738a",
                            Email = "user5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@GMAIL.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAEAACcQAAAAEDOhAgBSfxJ5FILytUEIg25clQLpeb87deCWS+mN+AYZETE7aCVx/7TO2QzOGPhVIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8df378c-90d1-406b-90bb-3a0d5dbc4812",
                            TwoFactorEnabled = false,
                            UserName = "User5"
                        },
                        new
                        {
                            Id = "086a5857-342b-4623-8ac4-5f1a9ed51bc2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9198de6a-7f56-4301-805d-eddb484f9ebc",
                            Email = "user6@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@GMAIL.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAEAACcQAAAAEGyt9dsTtn8NqXBrWscAiKzWJa0X8VrZcfXzaQAw7Bh4JwOoXDYCq2ASpWxteqnqRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "752b001a-e50c-45ee-a8f9-b28c00a538bc",
                            TwoFactorEnabled = false,
                            UserName = "User6"
                        },
                        new
                        {
                            Id = "a88e6663-482c-422c-8fcd-ba31b3ff9e02",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "137c3c8e-af7e-447c-941c-e70bbd4cbe61",
                            Email = "user7@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@GMAIL.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAEAACcQAAAAEHhipJTIAwUj8GwfVhTW2O3Zpok4nTQJvstbEuDdR3dRSjsDvKWkE7kL5HiYKF7wKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f40fde00-0314-4deb-94bf-956d0193c164",
                            TwoFactorEnabled = false,
                            UserName = "User7"
                        },
                        new
                        {
                            Id = "2eae995f-5cc1-4339-9ed0-62b2fd3c6b1d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "634be477-402c-41fd-86b3-f850c46ef871",
                            Email = "user8@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@GMAIL.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAEAACcQAAAAEGnNKJ5+L3b9RB76Et7ZO6dBS1cziBbc/ZX19d4VcnCKl2DYKy7Gmolzy/lE81uaEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f61786de-6bad-41c1-87ba-d0665f9fbb5c",
                            TwoFactorEnabled = false,
                            UserName = "User8"
                        },
                        new
                        {
                            Id = "b739a342-8618-4e4e-8d6f-02097591aacb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bbf60564-bd45-4ff2-95a4-60f8170ad9c2",
                            Email = "user9@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@GMAIL.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAEAACcQAAAAEKJPnBAI1oDCXQcJHZ7nJcGuivJOYQI6Qye0xhVO6vK0PbsqklebN/YdXpLCqtqnfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8799c36f-8e3b-4ff5-8c17-236ea1218ad4",
                            TwoFactorEnabled = false,
                            UserName = "User9"
                        },
                        new
                        {
                            Id = "cac8e323-5ea4-4748-88e2-fa5c2204e56b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a109cbe0-fae6-4883-9b8b-7f451a7041dc",
                            Email = "user10@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@GMAIL.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAEAACcQAAAAEPYWi4dzMthcu5vc8t6Kjp8AQ+TSqf2sY4OMBQjXdtZ2izRo2j628knAnVULjH+fwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "34db4521-12ae-4aad-a630-5d829fddf237",
                            TwoFactorEnabled = false,
                            UserName = "User10"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "df3023f9-56b0-4157-b66e-bb8dd1a230ec",
                            ConcurrencyStamp = "dbd7f721-55ec-4560-920c-ed5d69f06314",
                            Name = "User"
                        },
                        new
                        {
                            Id = "958bac4a-cb7d-44f9-b43d-9e44a8aea839",
                            ConcurrencyStamp = "1c51a27e-ad83-4eba-a79c-57b161bd3e5f",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "b643762a-fdd4-4539-b10e-77d3f8d0626a",
                            ConcurrencyStamp = "ec764a4f-db73-4ad5-bb55-87402c2b371a",
                            Name = "ProjectViewer"
                        },
                        new
                        {
                            Id = "a3375742-2130-4caf-ba4c-7f8c6b7c7676",
                            ConcurrencyStamp = "cc62d352-6c26-4c7e-8f54-963015a287fd",
                            Name = "ProjectEditor"
                        },
                        new
                        {
                            Id = "56691bad-3d87-4d41-adb5-1662a49a2b78",
                            ConcurrencyStamp = "015b5f1f-169f-4262-b36f-15a0f2ed7fb5",
                            Name = "ProjectOwner"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ImageCore.Models.ContactModel", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", "ContactUser")
                        .WithMany()
                        .HasForeignKey("ContactUserId");

                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ContactUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImageCore.Models.FilterModel", b =>
                {
                    b.HasOne("ImageCore.Models.ImageLayerModel", "ImageLayer")
                        .WithMany()
                        .HasForeignKey("ImageLayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("Filters")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageLayer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ImageComponentModel", b =>
                {
                    b.HasOne("ImageCore.Models.ImageLayerModel", "ImageLayer")
                        .WithMany()
                        .HasForeignKey("ImageLayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ImageComponents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageLayer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ImageLayerModel", b =>
                {
                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ImageLayers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectParticipatorModel", b =>
                {
                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ProjectParticipators")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany("ProjectParticipators")
                        .HasForeignKey("UserId");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.Navigation("Filters");

                    b.Navigation("ImageComponents");

                    b.Navigation("ImageLayers");

                    b.Navigation("ProjectParticipators");
                });

            modelBuilder.Entity("ImageCore.Models.UserModel", b =>
                {
                    b.Navigation("ProjectParticipators");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
