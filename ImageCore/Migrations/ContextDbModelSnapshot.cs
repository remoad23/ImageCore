// <auto-generated />
using System;
using ImageCore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ImageCore.Migrations
{
    [DbContext(typeof(ContextDb))]
    partial class ContextDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("ImageCore.Models.ContactModel", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequestValidated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ContactId");

                    b.HasIndex("ContactUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("ImageCore.Models.FilterModel", b =>
                {
                    b.Property<int>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilterType")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageLayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FilterId");

                    b.HasIndex("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("ImageCore.Models.ImageComponentModel", b =>
                {
                    b.Property<int>("ImageComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorMat")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageLayerId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("LocalX")
                        .HasColumnType("REAL");

                    b.Property<float>("LocalY")
                        .HasColumnType("REAL");

                    b.Property<float>("LocalZ")
                        .HasColumnType("REAL");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ImageComponentId");

                    b.HasIndex("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ImageComponent");
                });

            modelBuilder.Entity("ImageCore.Models.ImageLayerModel", b =>
                {
                    b.Property<int>("ImageLayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LayerType")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaskMat")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Opacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.Property<float>("X")
                        .HasColumnType("REAL");

                    b.Property<float>("Y")
                        .HasColumnType("REAL");

                    b.Property<float>("Z")
                        .HasColumnType("REAL");

                    b.HasKey("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ImageLayer");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            Name = "Projekt 1",
                            UserId = "f418e844-e717-4435-b034-8c4a20d9f8c7",
                            Views = 4355
                        },
                        new
                        {
                            ProjectId = 2,
                            Name = "Projekt 2",
                            UserId = "96780c5c-df36-44db-a1cd-69b1f4dce2a5",
                            Views = 4
                        },
                        new
                        {
                            ProjectId = 3,
                            Name = "Projekt 3",
                            UserId = "f418e844-e717-4435-b034-8c4a20d9f8c7",
                            Views = 345
                        },
                        new
                        {
                            ProjectId = 4,
                            Name = "Projekt 4",
                            UserId = "2c8d5bb0-1ad3-4046-babe-aac833d12390",
                            Views = 2
                        },
                        new
                        {
                            ProjectId = 5,
                            Name = "Projekt 5",
                            UserId = "efacdc5e-9dc6-4d69-90b7-421dd35e7f12",
                            Views = 25
                        });
                });

            modelBuilder.Entity("ImageCore.Models.ProjectParticipatorModel", b =>
                {
                    b.Property<int>("ProjectParticipatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectParticipatorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectParticipator");

                    b.HasData(
                        new
                        {
                            ProjectParticipatorId = 1,
                            ProjectId = 1,
                            UserId = "f418e844-e717-4435-b034-8c4a20d9f8c7"
                        },
                        new
                        {
                            ProjectParticipatorId = 2,
                            ProjectId = 1,
                            UserId = "2c8d5bb0-1ad3-4046-babe-aac833d12390"
                        },
                        new
                        {
                            ProjectParticipatorId = 3,
                            ProjectId = 1,
                            UserId = "efacdc5e-9dc6-4d69-90b7-421dd35e7f12"
                        },
                        new
                        {
                            ProjectParticipatorId = 4,
                            ProjectId = 2,
                            UserId = "2c8d5bb0-1ad3-4046-babe-aac833d12390"
                        },
                        new
                        {
                            ProjectParticipatorId = 5,
                            ProjectId = 2,
                            UserId = "96780c5c-df36-44db-a1cd-69b1f4dce2a5"
                        },
                        new
                        {
                            ProjectParticipatorId = 6,
                            ProjectId = 3,
                            UserId = "f418e844-e717-4435-b034-8c4a20d9f8c7"
                        },
                        new
                        {
                            ProjectParticipatorId = 7,
                            ProjectId = 4,
                            UserId = "f418e844-e717-4435-b034-8c4a20d9f8c7"
                        },
                        new
                        {
                            ProjectParticipatorId = 8,
                            ProjectId = 4,
                            UserId = "2c8d5bb0-1ad3-4046-babe-aac833d12390"
                        },
                        new
                        {
                            ProjectParticipatorId = 9,
                            ProjectId = 4,
                            UserId = "efacdc5e-9dc6-4d69-90b7-421dd35e7f12"
                        },
                        new
                        {
                            ProjectParticipatorId = 10,
                            ProjectId = 4,
                            UserId = "96780c5c-df36-44db-a1cd-69b1f4dce2a5"
                        },
                        new
                        {
                            ProjectParticipatorId = 11,
                            ProjectId = 5,
                            UserId = "f418e844-e717-4435-b034-8c4a20d9f8c7"
                        },
                        new
                        {
                            ProjectParticipatorId = 12,
                            ProjectId = 5,
                            UserId = "2c8d5bb0-1ad3-4046-babe-aac833d12390"
                        },
                        new
                        {
                            ProjectParticipatorId = 13,
                            ProjectId = 5,
                            UserId = "efacdc5e-9dc6-4d69-90b7-421dd35e7f12"
                        },
                        new
                        {
                            ProjectParticipatorId = 14,
                            ProjectId = 5,
                            UserId = "96780c5c-df36-44db-a1cd-69b1f4dce2a5"
                        },
                        new
                        {
                            ProjectParticipatorId = 15,
                            ProjectId = 5,
                            UserId = "2af9bcf3-fc5c-4f46-aaab-c345a42bc7f0"
                        });
                });

            modelBuilder.Entity("ImageCore.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("image")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "f418e844-e717-4435-b034-8c4a20d9f8c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf537cf3-c567-4aff-9a44-854a3fbfe4b7",
                            Email = "imagecore23@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IMAGECORE23@GMAIL.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEOgxtFgtQdj26I8oScDdEItkqLK+eGtlG4Jmol6c+Pa7AxsavuKXNbVja3kJdVUdng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35618aa7-398b-4b82-8fef-3f4a11bddf93",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "2c8d5bb0-1ad3-4046-babe-aac833d12390",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53ae892b-0658-4d04-8a92-b388cd842ac3",
                            Email = "imagecore24@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IMAGECORE24@GMAIL.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEDcftLqaZVec3WgfGQ61lbzdnlavdK/1Esk8MsZI/1kNSg1GBYbmxDhGsmVlxDzc7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6520c2bb-7981-4083-9b34-b03990264f1a",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "efacdc5e-9dc6-4d69-90b7-421dd35e7f12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62116ff1-741e-46ec-bd39-29fbdcbfcd54",
                            Email = "imagecoreuser@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IMAGECOREUSER@GMAIL.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAENTw+ZZFhrDPj80qt2arFHXRLfb0d1m8pLonkRkgaorUe4PBMr+/952H0zFQUzMvgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc72ffc6-e71c-45ad-b726-f6d0b5eaa6c6",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "96780c5c-df36-44db-a1cd-69b1f4dce2a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9081657-d92b-4326-9e2a-8e3e28643f71",
                            Email = "user4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@GMAIL.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEGU3NebGjSVXhJeBmLAlkII/jCI3+t2IYKynq1BZj2i5dn+wUJnhEbTyXAzUK1E0Kw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b6f4a44c-7092-442c-b3ee-da144de0947e",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = "2af9bcf3-fc5c-4f46-aaab-c345a42bc7f0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17443070-1052-4b26-915e-0095b8548aa3",
                            Email = "user5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@GMAIL.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAEAACcQAAAAEHwcuuX8486oV0F4tJ8nHOskvljOFtTCCAjHUmg2z5nFPHrddZ2k9QaM3UN8Uv3L2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "052bae42-2473-45ef-8ffb-0b221be4c256",
                            TwoFactorEnabled = false,
                            UserName = "User5"
                        },
                        new
                        {
                            Id = "fe53f15b-16a7-4909-8357-7859d1249914",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42e3918f-dd5b-4cc4-9813-d7103670ef9b",
                            Email = "user6@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@GMAIL.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAEAACcQAAAAEPGpci0MOwTzSWO/uzUGlCkyu6L5jxq9oPVkxFqcCg8N622D0w3ZJ7YLqNXM7PBTjA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df4189db-766b-4617-8184-9a1d7d93e56c",
                            TwoFactorEnabled = false,
                            UserName = "User6"
                        },
                        new
                        {
                            Id = "f51f52bc-dc76-4e94-ab1d-042207652a36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba0d1060-794a-4c41-b84b-f1efb9723173",
                            Email = "user7@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@GMAIL.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAEAACcQAAAAEMKdQ5y+PrsHXBbhxDMLjkuClHAqyFz01Izl0jLxSAV9m/w3b9iU9RiNzq8+uTsO/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7bb6128b-41cb-4cac-8bc3-97e9e763f4be",
                            TwoFactorEnabled = false,
                            UserName = "User7"
                        },
                        new
                        {
                            Id = "aa63441a-ab37-42ec-bd14-d0e8435c9063",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a49493ce-9d22-4b7a-8036-51250af29ea0",
                            Email = "user8@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@GMAIL.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAEAACcQAAAAEAOZ6kw1CzkjqCBz6V0V4SVnYRtznz4k3IbUQHksq8C6viksCjAEjXIUucTqkwtEbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5bb3572-894c-4e40-8526-5c6ccfb119d6",
                            TwoFactorEnabled = false,
                            UserName = "User8"
                        },
                        new
                        {
                            Id = "d8aa6119-148d-4020-bbdd-89636079cb6b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5bff995f-21dc-46b8-a58c-4cf8a3ef8f82",
                            Email = "user9@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@GMAIL.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAEAACcQAAAAEH0kIhhHF/Ykk1gLt6Zb49DvECAp3kIuceP5fY6ZgL7zmTYzrlFbeZjoHLeZ2LB0FA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "16508379-f729-4509-a97d-a15fd8081e95",
                            TwoFactorEnabled = false,
                            UserName = "User9"
                        },
                        new
                        {
                            Id = "28566d0f-036e-4769-b293-65ddcf8b58ce",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94a3236d-50e5-41b0-bbdb-47c257703765",
                            Email = "user10@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@GMAIL.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAEAACcQAAAAEOJeQpqsU07W1EykP1JZW5wjVlqaJiHVgnzWa8YbW8Aui5Uxpe7qlYrZt9E+VLbMPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7976a5d7-e555-4bc7-94d8-5d36454c0861",
                            TwoFactorEnabled = false,
                            UserName = "User10"
                        },
                        new
                        {
                            Id = "76a351fa-e379-49dc-9262-db8df6b73c47",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9ba0164-321a-465d-9991-1bd895a2a972",
                            Email = "user11@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER11@GMAIL.COM",
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAEAACcQAAAAEM2u0yKrgE/q8gZdIUM8C9q1oEbThJGudHTq5rdDIwnNRkibVyGyUgWbbZbIxm+f4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "abcf769c-3033-4504-a6e1-c03221610d4e",
                            TwoFactorEnabled = false,
                            UserName = "User11"
                        },
                        new
                        {
                            Id = "32990fc4-6d50-431b-a07a-070d0807ff23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54e3a98e-bd1d-4832-ac2f-61ac9d461bba",
                            Email = "user12@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER12@GMAIL.COM",
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAEAACcQAAAAEBd4L/YoTYVIM6ShPcwcZx52oFUm+hOHmfrDH9n3pPddAf7VL/DtqRNjPN7vGN4BjA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9cc61e5d-1c2f-4094-9085-d113368e692e",
                            TwoFactorEnabled = false,
                            UserName = "User12"
                        },
                        new
                        {
                            Id = "3d8bbf5b-7501-4c5d-89ec-4128b13861f9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "834cc435-74c3-42ad-aebe-7f0cfb46946e",
                            Email = "user13@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER13@GMAIL.COM",
                            NormalizedUserName = "USER13",
                            PasswordHash = "AQAAAAEAACcQAAAAEHcriJ5yjqB0UtyD4bkcNW6Ouj1Tv8uzA0/o+bGsqr45FZGPeM1cIlxVncHajxkocw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e89aee7c-e094-4b35-aa6c-8c528482d0f0",
                            TwoFactorEnabled = false,
                            UserName = "User13"
                        },
                        new
                        {
                            Id = "e1f9f19b-6d2e-4169-92f4-fc3043d9e4f8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2971bf5e-1de0-43ec-9ed1-2e54bdb6d05d",
                            Email = "user14@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER14@GMAIL.COM",
                            NormalizedUserName = "USER14",
                            PasswordHash = "AQAAAAEAACcQAAAAECLeLiAi2Z+gUfq0084R1d4IfYX4FP1Qqhmj/ogCLTMqQewOLlY4ywTcb8bfVXiVLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eea0ed7e-5ad3-4e5a-8473-75d6d7d62f53",
                            TwoFactorEnabled = false,
                            UserName = "User14"
                        },
                        new
                        {
                            Id = "8b3c7199-a432-456e-bb4e-82ddea6ff860",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fec15b4c-0584-4b24-a3fa-2c5f2fda45b4",
                            Email = "user15@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER15@GMAIL.COM",
                            NormalizedUserName = "USER15",
                            PasswordHash = "AQAAAAEAACcQAAAAEM/DSLhfAc6ykN7EhdYIuSlKzfxknes0CGtTY+dsE2OZzhb6DH8uTfYqSULHbAexcA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ed99f70-e294-4ccd-8cd9-ede4efb23561",
                            TwoFactorEnabled = false,
                            UserName = "User15"
                        },
                        new
                        {
                            Id = "e8adcd93-bffc-480f-a629-2e47e2d2e0c8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9e2de5d-2156-42b0-8a65-010baeaedc77",
                            Email = "user16@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER16@GMAIL.COM",
                            NormalizedUserName = "USER16",
                            PasswordHash = "AQAAAAEAACcQAAAAEORkywspYXmlETsuLzqyoW6THCVrqpY/vi2N1riClQmFS3l7xgCbZt+yIo2OMmlXHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9170c13c-6872-4b52-a385-3a777c8a8ebd",
                            TwoFactorEnabled = false,
                            UserName = "User16"
                        },
                        new
                        {
                            Id = "49b359a1-fe4c-4d10-a373-84e7359f4ff5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "825a1a91-843e-41e6-bf72-d945ce9e9421",
                            Email = "user17@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER17@GMAIL.COM",
                            NormalizedUserName = "USER17",
                            PasswordHash = "AQAAAAEAACcQAAAAEOTo9+Qot3g+UJm5AfxYoocZyCmRXvjFO4UODq77oV1r2rCSHi1O3Z2fw1sEQQDXsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d7900f0-8c17-4e25-bb51-dfc4b3adc6d6",
                            TwoFactorEnabled = false,
                            UserName = "User17"
                        },
                        new
                        {
                            Id = "f016ae25-8371-41dd-af1b-17e897e992d0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90eb5e3c-0c0e-408c-b4fb-4379ea5c7a74",
                            Email = "user18@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER18@GMAIL.COM",
                            NormalizedUserName = "USER18",
                            PasswordHash = "AQAAAAEAACcQAAAAEPZCf9pB6TCRxrChs9PizA7OLM3KuqhbyWhtbUYHzMM0xIWvwC4tWp9O6pH/7nNaoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c5e426e-7762-4dee-9683-a8ec10b4b41e",
                            TwoFactorEnabled = false,
                            UserName = "User18"
                        },
                        new
                        {
                            Id = "b96b93d1-7575-43fa-87d0-6adbd365e2ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1bdc058-fdef-4376-9fb9-24f0589f4ae3",
                            Email = "user19@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER19@GMAIL.COM",
                            NormalizedUserName = "USER19",
                            PasswordHash = "AQAAAAEAACcQAAAAEOMOvX6gXJMiVCUpVoULd06anA7I7LIEhQvkQwWk85RWO/z7FlGOQCllsYRbZnlurQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "638484b9-050e-4523-93c4-035c5fc51d3d",
                            TwoFactorEnabled = false,
                            UserName = "User19"
                        },
                        new
                        {
                            Id = "1aad9d36-e054-4212-9101-20eb00992580",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8b5a43c-cbb2-4793-80fa-31e6312fe73d",
                            Email = "user20@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER20@GMAIL.COM",
                            NormalizedUserName = "USER20",
                            PasswordHash = "AQAAAAEAACcQAAAAEM08NSg3nQGHHnGC/5qHFogR0E0gtR03cJ5ZFoIXaMr8pRSR5zpEJT3/wJcf4RG0pA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c2c1fd1-821a-412f-835f-311ac3283434",
                            TwoFactorEnabled = false,
                            UserName = "User20"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "d0a4f625-6aae-45d5-ad26-2399a4f04455",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "21cbc744-a0f7-4f11-bfe1-7dbede884626",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "e29d246d-b665-43dd-9fac-943950913d2d",
                            Name = "ProjectViewer",
                            NormalizedName = "PROJECTVIEWER"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "eb286ce9-eadd-4433-9164-f491a67da189",
                            Name = "ProjectEditor",
                            NormalizedName = "PROJECTEDITOR"
                        },
                        new
                        {
                            Id = "5",
                            ConcurrencyStamp = "25405133-585c-4ea0-acda-c8f7906568d7",
                            Name = "ProjectOwner",
                            NormalizedName = "PROJECTOWNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "f418e844-e717-4435-b034-8c4a20d9f8c7",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "2c8d5bb0-1ad3-4046-babe-aac833d12390",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "efacdc5e-9dc6-4d69-90b7-421dd35e7f12",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "96780c5c-df36-44db-a1cd-69b1f4dce2a5",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "2af9bcf3-fc5c-4f46-aaab-c345a42bc7f0",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "fe53f15b-16a7-4909-8357-7859d1249914",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "f51f52bc-dc76-4e94-ab1d-042207652a36",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "aa63441a-ab37-42ec-bd14-d0e8435c9063",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "d8aa6119-148d-4020-bbdd-89636079cb6b",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "28566d0f-036e-4769-b293-65ddcf8b58ce",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "76a351fa-e379-49dc-9262-db8df6b73c47",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "32990fc4-6d50-431b-a07a-070d0807ff23",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "3d8bbf5b-7501-4c5d-89ec-4128b13861f9",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "e1f9f19b-6d2e-4169-92f4-fc3043d9e4f8",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "8b3c7199-a432-456e-bb4e-82ddea6ff860",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "e8adcd93-bffc-480f-a629-2e47e2d2e0c8",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "49b359a1-fe4c-4d10-a373-84e7359f4ff5",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "f016ae25-8371-41dd-af1b-17e897e992d0",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "b96b93d1-7575-43fa-87d0-6adbd365e2ac",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "1aad9d36-e054-4212-9101-20eb00992580",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ImageCore.Models.ContactModel", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", "ContactUser")
                        .WithMany()
                        .HasForeignKey("ContactUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImageCore.Models.FilterModel", b =>
                {
                    b.HasOne("ImageCore.Models.ImageLayerModel", "ImageLayer")
                        .WithMany()
                        .HasForeignKey("ImageLayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("Filters")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageLayer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ImageComponentModel", b =>
                {
                    b.HasOne("ImageCore.Models.ImageLayerModel", "ImageLayer")
                        .WithMany()
                        .HasForeignKey("ImageLayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ImageComponents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageLayer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ImageLayerModel", b =>
                {
                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ImageLayers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectParticipatorModel", b =>
                {
                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ProjectParticipators")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany("ProjectParticipators")
                        .HasForeignKey("UserId");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.Navigation("Filters");

                    b.Navigation("ImageComponents");

                    b.Navigation("ImageLayers");

                    b.Navigation("ProjectParticipators");
                });

            modelBuilder.Entity("ImageCore.Models.UserModel", b =>
                {
                    b.Navigation("ProjectParticipators");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
