// <auto-generated />
using System;
using ImageCore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ImageCore.Migrations
{
    [DbContext(typeof(ContextDb))]
    [Migration("20210730191721_InitialCreateImageCoreDb")]
    partial class InitialCreateImageCoreDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("ImageCore.Models.ContactModel", b =>
                {
                    b.Property<string>("ContactId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequestValidated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ContactId");

                    b.HasIndex("ContactUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("ImageCore.Models.FilterModel", b =>
                {
                    b.Property<Guid>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FilterType")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageLayerId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ImageLayerId1")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectId1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FilterId");

                    b.HasIndex("ImageLayerId1");

                    b.HasIndex("ProjectId1");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("ImageCore.Models.ImageComponentModel", b =>
                {
                    b.Property<string>("ImageComponentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ColorMat")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageLayerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ImageLayerId1")
                        .HasColumnType("TEXT");

                    b.Property<float>("LocalX")
                        .HasColumnType("REAL");

                    b.Property<float>("LocalY")
                        .HasColumnType("REAL");

                    b.Property<float>("LocalZ")
                        .HasColumnType("REAL");

                    b.Property<string>("ProjectId")
                        .HasColumnType("TEXT");

                    b.HasKey("ImageComponentId");

                    b.HasIndex("ImageLayerId1");

                    b.HasIndex("ProjectId");

                    b.ToTable("ImageComponent");
                });

            modelBuilder.Entity("ImageCore.Models.ImageLayerModel", b =>
                {
                    b.Property<Guid>("ImageLayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("LayerType")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaskMat")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Opacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Visible")
                        .HasColumnType("INTEGER");

                    b.Property<float>("X")
                        .HasColumnType("REAL");

                    b.Property<float>("Y")
                        .HasColumnType("REAL");

                    b.Property<float>("Z")
                        .HasColumnType("REAL");

                    b.HasKey("ImageLayerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ImageLayer");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            ProjectId = "7e398450-7314-4703-a8f6-20c322c956a4",
                            Name = "Projekt 1",
                            UserId = "714e6d91-1df9-494e-898e-591655a2ff5d",
                            Views = 4355
                        },
                        new
                        {
                            ProjectId = "12ea7872-2966-42ae-9101-67708c2f62ef",
                            Name = "Projekt 2",
                            UserId = "b10fa5b1-9c5c-4e91-9515-4ecc09e4c7df",
                            Views = 4
                        },
                        new
                        {
                            ProjectId = "806327e1-109f-4ee9-aef9-8e8cb686de51",
                            Name = "Projekt 3",
                            UserId = "714e6d91-1df9-494e-898e-591655a2ff5d",
                            Views = 345
                        },
                        new
                        {
                            ProjectId = "8ad5f37f-57b0-4728-8d4f-c635b582fad4",
                            Name = "Projekt 4",
                            UserId = "630beaf3-d8a9-475b-8001-5ec08db5ad12",
                            Views = 2
                        },
                        new
                        {
                            ProjectId = "669aaad2-ab0e-44cd-b12b-fdce4e746063",
                            Name = "Projekt 5",
                            UserId = "c374c344-1e19-4f77-ac61-56382277f014",
                            Views = 25
                        });
                });

            modelBuilder.Entity("ImageCore.Models.ProjectParticipatorModel", b =>
                {
                    b.Property<string>("ProjectParticipatorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectParticipatorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectParticipator");

                    b.HasData(
                        new
                        {
                            ProjectParticipatorId = "f575420a-7643-4865-ac23-cbf1f386d3f5",
                            ProjectId = "7e398450-7314-4703-a8f6-20c322c956a4",
                            UserId = "714e6d91-1df9-494e-898e-591655a2ff5d"
                        },
                        new
                        {
                            ProjectParticipatorId = "91298e3e-3326-4e3c-8b57-7d0bd1e85f7d",
                            ProjectId = "7e398450-7314-4703-a8f6-20c322c956a4",
                            UserId = "630beaf3-d8a9-475b-8001-5ec08db5ad12"
                        },
                        new
                        {
                            ProjectParticipatorId = "030bee91-0ffb-4fcc-ae17-d9724330f2df",
                            ProjectId = "7e398450-7314-4703-a8f6-20c322c956a4",
                            UserId = "c374c344-1e19-4f77-ac61-56382277f014"
                        },
                        new
                        {
                            ProjectParticipatorId = "553bee97-6101-4bfe-bb3c-8f6ca8d8f3cc",
                            ProjectId = "12ea7872-2966-42ae-9101-67708c2f62ef",
                            UserId = "630beaf3-d8a9-475b-8001-5ec08db5ad12"
                        },
                        new
                        {
                            ProjectParticipatorId = "9f22b06b-7311-48eb-b346-653c2d2245e7",
                            ProjectId = "12ea7872-2966-42ae-9101-67708c2f62ef",
                            UserId = "b10fa5b1-9c5c-4e91-9515-4ecc09e4c7df"
                        },
                        new
                        {
                            ProjectParticipatorId = "bfcce3e3-d123-484c-9928-7c60dc8f60a8",
                            ProjectId = "806327e1-109f-4ee9-aef9-8e8cb686de51",
                            UserId = "714e6d91-1df9-494e-898e-591655a2ff5d"
                        },
                        new
                        {
                            ProjectParticipatorId = "e4bbf3c5-5b27-473f-90d4-88c439de1e41",
                            ProjectId = "8ad5f37f-57b0-4728-8d4f-c635b582fad4",
                            UserId = "714e6d91-1df9-494e-898e-591655a2ff5d"
                        },
                        new
                        {
                            ProjectParticipatorId = "21c82b6a-1de0-4843-a9d6-b41a205ac2ce",
                            ProjectId = "8ad5f37f-57b0-4728-8d4f-c635b582fad4",
                            UserId = "630beaf3-d8a9-475b-8001-5ec08db5ad12"
                        },
                        new
                        {
                            ProjectParticipatorId = "df383848-be59-42a6-ae54-ee83afeedbe4",
                            ProjectId = "8ad5f37f-57b0-4728-8d4f-c635b582fad4",
                            UserId = "c374c344-1e19-4f77-ac61-56382277f014"
                        },
                        new
                        {
                            ProjectParticipatorId = "a39f1aff-2653-43ee-a65f-d05915cba671",
                            ProjectId = "8ad5f37f-57b0-4728-8d4f-c635b582fad4",
                            UserId = "b10fa5b1-9c5c-4e91-9515-4ecc09e4c7df"
                        },
                        new
                        {
                            ProjectParticipatorId = "af7826bd-5a7e-4ecd-891e-47d186a1663d",
                            ProjectId = "669aaad2-ab0e-44cd-b12b-fdce4e746063",
                            UserId = "714e6d91-1df9-494e-898e-591655a2ff5d"
                        },
                        new
                        {
                            ProjectParticipatorId = "f94319a0-f700-432a-891f-02fcfe1ed8b3",
                            ProjectId = "669aaad2-ab0e-44cd-b12b-fdce4e746063",
                            UserId = "630beaf3-d8a9-475b-8001-5ec08db5ad12"
                        },
                        new
                        {
                            ProjectParticipatorId = "5674f547-1159-4223-bfa3-c4ae48884c73",
                            ProjectId = "669aaad2-ab0e-44cd-b12b-fdce4e746063",
                            UserId = "c374c344-1e19-4f77-ac61-56382277f014"
                        },
                        new
                        {
                            ProjectParticipatorId = "bd9508a6-7ba2-495b-bf7e-477b35f4fbc9",
                            ProjectId = "669aaad2-ab0e-44cd-b12b-fdce4e746063",
                            UserId = "b10fa5b1-9c5c-4e91-9515-4ecc09e4c7df"
                        },
                        new
                        {
                            ProjectParticipatorId = "ddd4e971-4c36-4009-84ae-555ac2bebca0",
                            ProjectId = "669aaad2-ab0e-44cd-b12b-fdce4e746063",
                            UserId = "9676444a-bc74-4a91-860a-cd8ca8df05ba"
                        });
                });

            modelBuilder.Entity("ImageCore.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("image")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "714e6d91-1df9-494e-898e-591655a2ff5d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b0d0f6b-a337-46f3-9457-0c38662d13a0",
                            Description = "Hallo! Ich bin eine Beschreibung über dieses Profil!",
                            Email = "imagecore23@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IMAGECORE23@GMAIL.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEKslS51/GD/bRopl7r91ibWxjpjdIOtq+1E3Mc1MlPEDs9srKvWcmGNNsBuu3dayEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1950492f-96f5-4eac-ae1b-2b46d3ec7932",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "630beaf3-d8a9-475b-8001-5ec08db5ad12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b428f23-5980-41b0-a084-c4f45f327aa7",
                            Description = "Hallo! Ich bin eine Beschreibung über dieses Profil!",
                            Email = "imagecore24@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IMAGECORE24@GMAIL.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEPAtLX/pS0aZB4cBegGwjEnTQ4VIAgs5DploE4nxXwajW4IrQXK/2OvRj3Vm/yTB/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30920943-3ae9-43b2-89a1-f2c59c4ca1e0",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "c374c344-1e19-4f77-ac61-56382277f014",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b92aad54-cd83-46c5-9c78-6ca890b81591",
                            Description = "Hallo! Ich bin eine Beschreibung über dieses Profil!",
                            Email = "imagecoreuser@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IMAGECOREUSER@GMAIL.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEEZuE+Y0ZSFbAzR2n7U++cutC4zcQSxw2pBXjVo9Y+D4tru2NJa2d+FeoGRqjdtrMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d9a361f0-6ef2-4758-8143-e5165d0a2c92",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "b10fa5b1-9c5c-4e91-9515-4ecc09e4c7df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b54bc602-2e30-4409-9e47-2a851697431c",
                            Description = "Hallo! Ich bin eine Beschreibung über dieses Profil!",
                            Email = "user4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@GMAIL.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEDOj7xd5Ncm8gguR3SMLVvAOtkYPf5E/6+dWNRNK73gHgSOHs8gqO7BNB/fiF1U8+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79b6247d-e4c7-4d3d-98dc-6c210c4bfb6d",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = "9676444a-bc74-4a91-860a-cd8ca8df05ba",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8bd9bdb0-be02-467f-a527-98274f8601af",
                            Description = "Hallo! Ich bin eine Beschreibung über dieses Profil!",
                            Email = "user5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@GMAIL.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAEAACcQAAAAEFuRhUfOdAZJALHu5cDhxErkg8Z3CVSkkpG4J9z2dqEtC9GRZNo31wD3bGxFTQZ+9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1523fa79-52c4-4ff2-b4a6-de74ae95678c",
                            TwoFactorEnabled = false,
                            UserName = "User5"
                        },
                        new
                        {
                            Id = "d272dbd6-ed3e-42b7-810c-50f02097fed0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24499532-5044-4c01-98c1-e5531892c0d6",
                            Description = "Hallo! Ich bin eine Beschreibung über dieses Profil!",
                            Email = "user6@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@GMAIL.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAEAACcQAAAAEMLNmYcqm/C7Io4Yg0zgBkMEEbyCMzNbFWQvbYW5MM7YEI5Xo8f+WwhDBdDJIrLu7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28de2e40-5508-4000-9309-cbd45ee51d20",
                            TwoFactorEnabled = false,
                            UserName = "User6"
                        },
                        new
                        {
                            Id = "fe123dd2-d47f-4b14-a737-a2de36aeb6c1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f20194b-9f61-4be5-8af9-50a6b03e190a",
                            Description = "Hallo! Ich bin eine Beschreibung über dieses Profil!",
                            Email = "user7@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@GMAIL.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAEAACcQAAAAEPw62BuMxsyPwZhs2CA3MtlC0MVCNQerHxYWxeHRF17+ndfeCWj2vWhWWR4Qzzn//w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd045c5b-b950-47c4-8a2d-b2ab5ddf8340",
                            TwoFactorEnabled = false,
                            UserName = "User7"
                        },
                        new
                        {
                            Id = "12ed9430-d8f5-43d0-9e86-6aa1017c206c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a94b8092-cc72-48c3-87e6-fd3a651a0da7",
                            Description = "Hallo! Ich bin eine Beschreibung über dieses Profil!",
                            Email = "user8@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@GMAIL.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAEAACcQAAAAEKDiYo7KC4ArKQhuZi6ziS5uQVirmNBiimF8Og31orEyroNuD1A46lMns83KtZDDPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b11a6560-6475-41e7-8980-f2a70068c259",
                            TwoFactorEnabled = false,
                            UserName = "User8"
                        },
                        new
                        {
                            Id = "21f0d2e2-9d77-4690-936c-b15f9f8f88c8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "efc239ac-622b-4e0b-abe1-8e8f23c9fe47",
                            Description = "Hallo! Ich bin eine Beschreibung über dieses Profil!",
                            Email = "user9@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@GMAIL.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAEAACcQAAAAEEQXBjyfHT8ytR1jDkzUlZEoGOJFGMHpQTmCu3bsyLkJfXNFq+8UcK3JcO39gnsE7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b11d68b-ab4a-44b6-9435-bb198cbaa097",
                            TwoFactorEnabled = false,
                            UserName = "User9"
                        },
                        new
                        {
                            Id = "afcf5ef7-0655-4171-8104-2e867372e634",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a5fa618-8b0d-4cc9-aa9e-903e91048183",
                            Description = "Hallo! Ich bin eine Beschreibung über dieses Profil!",
                            Email = "user10@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@GMAIL.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAEAACcQAAAAEA6ud7BtEk6z25uKcXadsmp1AtfdDVg/ysdhBtMo+NoooOStGSV19BrIBDVJmEUAYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b0619c66-8e78-49a8-bb8d-1b90595c8d9d",
                            TwoFactorEnabled = false,
                            UserName = "User10"
                        },
                        new
                        {
                            Id = "93d10d56-9275-4f1d-b77a-c4f2d2b986d5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a32795c9-52a2-44ad-bb90-dcc510daef1d",
                            Email = "user11@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER11@GMAIL.COM",
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAEAACcQAAAAEOmLCLz/BIewdpeJSIMDBU2CAGvBN4S8VDU3UnU2IPunDfv2Ye+fM2A/0jpe1dZUSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6eac6a03-371b-447e-a104-386cafb8de01",
                            TwoFactorEnabled = false,
                            UserName = "User11"
                        },
                        new
                        {
                            Id = "52b298a4-5a1d-41c7-89b8-d99c69c575c6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5cb6921c-7ccc-4dbe-902c-18d749c6c3ee",
                            Email = "user12@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER12@GMAIL.COM",
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAEAACcQAAAAEAnnd335NHrSMlgrud/FrWt6j65vzSiagiIlwcHjfeprduZ+ZSsskC6bVr/dOJgkiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "02119aed-d8e1-4beb-b667-2197b773f85e",
                            TwoFactorEnabled = false,
                            UserName = "User12"
                        },
                        new
                        {
                            Id = "37dbbcba-c045-416f-8b2b-9819b440d8f8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7749121-57bd-4eca-8bea-4067346aca26",
                            Email = "user13@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER13@GMAIL.COM",
                            NormalizedUserName = "USER13",
                            PasswordHash = "AQAAAAEAACcQAAAAENeXCCj93SUPIyEnCkLi74BZInuZvwnHwhq5sUqHzTYY2XByjAdVaLOdTu9cvtontw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5a0a3df-1fa1-4ded-99b8-0e3180f2edc6",
                            TwoFactorEnabled = false,
                            UserName = "User13"
                        },
                        new
                        {
                            Id = "c3ac58c0-3b19-4a22-b457-ce31c1cb973a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c1892872-7c95-4a9c-a585-d07300ac8636",
                            Email = "user14@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER14@GMAIL.COM",
                            NormalizedUserName = "USER14",
                            PasswordHash = "AQAAAAEAACcQAAAAEEr6X519CA9dTy2H/NAowsm5j5KjosWKj5Hqni3dq+QL9cJVZbokNDwy4UAyyo+8IQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89f4568a-23ae-4fe0-bfb6-abd3b6997c14",
                            TwoFactorEnabled = false,
                            UserName = "User14"
                        },
                        new
                        {
                            Id = "6a89b3de-c4ba-464a-ac79-b0119d115226",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "72562874-1c17-473a-a9a6-6db80b3b72bf",
                            Email = "user15@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER15@GMAIL.COM",
                            NormalizedUserName = "USER15",
                            PasswordHash = "AQAAAAEAACcQAAAAEEFo6QcYpOWZUIXJuRdPnl0oIyEfc/Np1xRvmmxq0pMFc3qaAkTNO3COOaFnvU8WLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "262ff9a0-8968-44ec-a42e-a159ee157386",
                            TwoFactorEnabled = false,
                            UserName = "User15"
                        },
                        new
                        {
                            Id = "57fe5c73-2790-457e-b4cf-d482d6fc2305",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d261269f-c1d4-468f-b5bb-15d171e3dee6",
                            Email = "user16@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER16@GMAIL.COM",
                            NormalizedUserName = "USER16",
                            PasswordHash = "AQAAAAEAACcQAAAAEBT9r7hJ7RPOehIvzybRtj1JmwG5YVllnUuNFzwjhkHU2jvzkUQ0F3ZfWF36Bs2ucA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "59097ac1-d2d9-4f30-a07f-3c2c4bed05c2",
                            TwoFactorEnabled = false,
                            UserName = "User16"
                        },
                        new
                        {
                            Id = "0d0b9758-9139-4e5d-96c6-d275c0f9313a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "10551a91-16d3-4a3a-8910-2ae0960a9092",
                            Email = "user17@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER17@GMAIL.COM",
                            NormalizedUserName = "USER17",
                            PasswordHash = "AQAAAAEAACcQAAAAEIy2SV7SqiYvnj7Ykg79NC0QZCaHIHBIUQuJJUyM9DqyzQXXxksyyLZuVqV42g/1kQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa0cc80f-ca10-471e-b4df-f8a9ad2c068a",
                            TwoFactorEnabled = false,
                            UserName = "User17"
                        },
                        new
                        {
                            Id = "de07c5e4-8495-49bd-a4b8-5e93dd78695e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2db98f09-90b9-498b-8d5b-6af3de782ded",
                            Email = "user18@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER18@GMAIL.COM",
                            NormalizedUserName = "USER18",
                            PasswordHash = "AQAAAAEAACcQAAAAEDbT/lwjmlcJSNY/8iOdJHk5E57dpo61pNl1ZrUk50GHO2tUtVM9InJGslsKm51X1g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ea1b4c9-5ca3-43b1-891e-9b6b33a86f08",
                            TwoFactorEnabled = false,
                            UserName = "User18"
                        },
                        new
                        {
                            Id = "f649d216-e4e9-473d-b14d-71b6257722f2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "efbe1ed7-d16e-4c75-b899-05211bc3bccd",
                            Email = "user19@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER19@GMAIL.COM",
                            NormalizedUserName = "USER19",
                            PasswordHash = "AQAAAAEAACcQAAAAEClKZ7zMrdOtcu3WV0Z6yf7rJ7KAJvrYOlQKb34wp3RzP9b/MrYI5lSu3VQbdi2kzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e38f99c3-be51-47d7-af58-c9c0fd255469",
                            TwoFactorEnabled = false,
                            UserName = "User19"
                        },
                        new
                        {
                            Id = "ee43ce07-8251-48e5-ba73-00d5a0513728",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "40b5f16d-9324-4abc-9781-e4c8bd4c36d3",
                            Email = "user20@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER20@GMAIL.COM",
                            NormalizedUserName = "USER20",
                            PasswordHash = "AQAAAAEAACcQAAAAEOAy20Vah1RSq6CELUInioRBn02IGTlo/xXLLP9asSu6t27NvxhpPlQ03UcCWS8ZYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee8a709c-affd-46b6-a0b2-97f6547c0b31",
                            TwoFactorEnabled = false,
                            UserName = "User20"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "7c069d3a-070e-4f50-bb9a-bef2a4290cf0",
                            ConcurrencyStamp = "95e7f3f8-9d5b-4400-a61b-156bf54cff42",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "524a2e32-7188-4c17-b651-f606493acdae",
                            ConcurrencyStamp = "00c94c49-ce67-4979-ab76-3b1cb6f89663",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "e4b10fa7-5093-411c-85b2-b3daf021a2af",
                            ConcurrencyStamp = "b921256c-7a8e-4604-b960-df26018bae39",
                            Name = "ProjectEditor",
                            NormalizedName = "PROJECTEDITOR"
                        },
                        new
                        {
                            Id = "6a5b6fc4-ae21-480a-ab3e-9339b9050db4",
                            ConcurrencyStamp = "bacf3b1e-c0d0-436e-9df3-304b10d1b0eb",
                            Name = "ProjectOwner",
                            NormalizedName = "PROJECTOWNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "714e6d91-1df9-494e-898e-591655a2ff5d",
                            RoleId = "524a2e32-7188-4c17-b651-f606493acdae"
                        },
                        new
                        {
                            UserId = "630beaf3-d8a9-475b-8001-5ec08db5ad12",
                            RoleId = "524a2e32-7188-4c17-b651-f606493acdae"
                        },
                        new
                        {
                            UserId = "c374c344-1e19-4f77-ac61-56382277f014",
                            RoleId = "524a2e32-7188-4c17-b651-f606493acdae"
                        },
                        new
                        {
                            UserId = "b10fa5b1-9c5c-4e91-9515-4ecc09e4c7df",
                            RoleId = "524a2e32-7188-4c17-b651-f606493acdae"
                        },
                        new
                        {
                            UserId = "9676444a-bc74-4a91-860a-cd8ca8df05ba",
                            RoleId = "7c069d3a-070e-4f50-bb9a-bef2a4290cf0"
                        },
                        new
                        {
                            UserId = "d272dbd6-ed3e-42b7-810c-50f02097fed0",
                            RoleId = "7c069d3a-070e-4f50-bb9a-bef2a4290cf0"
                        },
                        new
                        {
                            UserId = "fe123dd2-d47f-4b14-a737-a2de36aeb6c1",
                            RoleId = "7c069d3a-070e-4f50-bb9a-bef2a4290cf0"
                        },
                        new
                        {
                            UserId = "12ed9430-d8f5-43d0-9e86-6aa1017c206c",
                            RoleId = "7c069d3a-070e-4f50-bb9a-bef2a4290cf0"
                        },
                        new
                        {
                            UserId = "21f0d2e2-9d77-4690-936c-b15f9f8f88c8",
                            RoleId = "7c069d3a-070e-4f50-bb9a-bef2a4290cf0"
                        },
                        new
                        {
                            UserId = "afcf5ef7-0655-4171-8104-2e867372e634",
                            RoleId = "7c069d3a-070e-4f50-bb9a-bef2a4290cf0"
                        },
                        new
                        {
                            UserId = "93d10d56-9275-4f1d-b77a-c4f2d2b986d5",
                            RoleId = "7c069d3a-070e-4f50-bb9a-bef2a4290cf0"
                        },
                        new
                        {
                            UserId = "52b298a4-5a1d-41c7-89b8-d99c69c575c6",
                            RoleId = "7c069d3a-070e-4f50-bb9a-bef2a4290cf0"
                        },
                        new
                        {
                            UserId = "37dbbcba-c045-416f-8b2b-9819b440d8f8",
                            RoleId = "7c069d3a-070e-4f50-bb9a-bef2a4290cf0"
                        },
                        new
                        {
                            UserId = "c3ac58c0-3b19-4a22-b457-ce31c1cb973a",
                            RoleId = "7c069d3a-070e-4f50-bb9a-bef2a4290cf0"
                        },
                        new
                        {
                            UserId = "6a89b3de-c4ba-464a-ac79-b0119d115226",
                            RoleId = "7c069d3a-070e-4f50-bb9a-bef2a4290cf0"
                        },
                        new
                        {
                            UserId = "57fe5c73-2790-457e-b4cf-d482d6fc2305",
                            RoleId = "7c069d3a-070e-4f50-bb9a-bef2a4290cf0"
                        },
                        new
                        {
                            UserId = "0d0b9758-9139-4e5d-96c6-d275c0f9313a",
                            RoleId = "7c069d3a-070e-4f50-bb9a-bef2a4290cf0"
                        },
                        new
                        {
                            UserId = "de07c5e4-8495-49bd-a4b8-5e93dd78695e",
                            RoleId = "7c069d3a-070e-4f50-bb9a-bef2a4290cf0"
                        },
                        new
                        {
                            UserId = "f649d216-e4e9-473d-b14d-71b6257722f2",
                            RoleId = "7c069d3a-070e-4f50-bb9a-bef2a4290cf0"
                        },
                        new
                        {
                            UserId = "ee43ce07-8251-48e5-ba73-00d5a0513728",
                            RoleId = "7c069d3a-070e-4f50-bb9a-bef2a4290cf0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ImageCore.Models.ContactModel", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", "ContactUser")
                        .WithMany()
                        .HasForeignKey("ContactUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImageCore.Models.FilterModel", b =>
                {
                    b.HasOne("ImageCore.Models.ImageLayerModel", "ImageLayer")
                        .WithMany()
                        .HasForeignKey("ImageLayerId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("Filters")
                        .HasForeignKey("ProjectId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageLayer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ImageComponentModel", b =>
                {
                    b.HasOne("ImageCore.Models.ImageLayerModel", "ImageLayer")
                        .WithMany()
                        .HasForeignKey("ImageLayerId1");

                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ImageComponents")
                        .HasForeignKey("ProjectId");

                    b.Navigation("ImageLayer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ImageLayerModel", b =>
                {
                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ImageLayers")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImageCore.Models.ProjectParticipatorModel", b =>
                {
                    b.HasOne("ImageCore.Models.ProjectModel", "Project")
                        .WithMany("ProjectParticipators")
                        .HasForeignKey("ProjectId");

                    b.HasOne("ImageCore.Models.UserModel", "User")
                        .WithMany("ProjectParticipators")
                        .HasForeignKey("UserId");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ImageCore.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImageCore.Models.ProjectModel", b =>
                {
                    b.Navigation("Filters");

                    b.Navigation("ImageComponents");

                    b.Navigation("ImageLayers");

                    b.Navigation("ProjectParticipators");
                });

            modelBuilder.Entity("ImageCore.Models.UserModel", b =>
                {
                    b.Navigation("ProjectParticipators");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
